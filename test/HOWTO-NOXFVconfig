OF filter for Wireshark works only on PORT 6633. This "bug" doesn't allow
to have a complete wireshark trace for overall signalling but only for a single
connection (OF SWITCH <--> FV or FV <--> NOX)
In order to have a "complete" trace we need to launch the testbed twice
(in a test we need to launch NOX on listening port 6633 as below and in another
 test we need to launch FV on listening port)

MININET
sudo mn -c
sudo mn --topo single,3 --mac --switch ovsk --controller remote --port 7733

Può essere utile lanciare il comando comando per visualizzare gli host
configurati con mininet:
xterm <host> (ad esempio xterm h2)

FLOWVISOR
fvconfig generate config.xml
sudo flowvisor config.xml
(in the config.xml insert the port 7733)

NOX
In /nox/build/src lanciare il comando:
./nox_core -v -i ptcp:6633 pyswitch


FLOWVISOR CONFIGURATION
fvctl listSlices  (Password: fvadmin)
Example of the output:
	Slice 0: bob
	Slice 1: fvadmin
	Slice 2: alice
	Slice 3: test2

fvctl deleteSlice <name_slice>

In order to show the OF Switch connected to FlowVisor run the following
command:
fvctl listDevices

Example of output:
	Device 0: 00:00:00:00:00:00:00:01

fvctl createSlice test2 tcp:localhost:6633 a.canessa@nextworks.it
fvctl getSliceInfo test2
Example of the obtained output:
	drop_policy=exact
	connection_1=00:00:00:00:00:00:00:01-->
                    /127.0.0.1:58762-->localhost/127.0.0.1:6633
	contact_email=a.canessa@nextworks.it
	controller_hostname=localhost
	controller_port=6633
	creator=fvadmin

fvctl addFlowSpace <dpid> <priority> <match> <actions>
Example:
	fvctl addFlowSpace any 10 any Slice:test2=7

Log of NOX after that the flowspace is added:
	00044|openflow|DBG:Passive tcp interface received connection
	00045|openflow|DBG:stream: negotiated OpenFlow version 0x01
(we support versions 0x01 to 0x01 inclusive, peer no later than version	0x01)
	00046|nox|DBG:Success sending in 'sending switch config'
	00047|nox|DBG:Success sending in 'receiving features reply'
	00048|nox|DBG:Success receiving in 'receiving features reply'
	00049|nox|DBG:Success sending in 'receiving ofmp capability reply'
	00050|nox|DBG:Success receiving in 'receiving ofmp capability reply'
	00051|nox|DBG:Datapath 000000000001 sent error in response to
        capability reply, assuming no management support
	00052|nox|DBG:No switch auth module registered, auto-approving switch
	00053|nox|DBG:Registering switch with DPID = 1
	00054|nox.coreapps.examples.pyswitch|INFO:Switch 1 has joined the network
	00055|openflow-event|ERR:received Openflow error packet from dpid=000000000001: type=1, code=8, 72 bytes of data
	00056|openflow-event|DBG:received echo-request event from 000000000001 (len:0)

(Log of “my NOX”:
SWITCH ID  = '1'
<type 'str'>
ATTRIBUTES = '{'ports': [{'hw_addr': '\xb2\xb6 \xc7\xe0\x87', 'curr': 192, 'name': 's1-eth3', 'speed': 10000, 'supported': 0, 'enabled': True, 'flood': True, 'state': 0, 'link': True, 'advertised': 0, 'peer': 0, 'config': 0, 'port_no': 3}, {'hw_addr': '\xf2\x95\xcc\xe7D\x05', 'curr': 192, 'name': 's1-eth2', 'speed': 10000, 'supported': 0, 'enabled': True, 'flood': True, 'state': 0, 'link': True, 'advertised': 0, 'peer': 0, 'config': 0, 'port_no': 2}, {'hw_addr': '\x00# \xb2\t]', 'curr': 0, 'name': 'dp0', 'speed': 0, 'supported': 0, 'enabled': False, 'flood': True, 'state': 1, 'link': False, 'advertised': 0, 'peer': 0, 'config': 1, 'port_no': 65534}, {'hw_addr': '\x16t\x88\x87\x99\x9c', 'curr': 192, 'name': 's1-eth1', 'speed': 10000, 'supported': 0, 'enabled': True, 'flood': True, 'state': 0, 'link': True, 'advertised': 0, 'peer': 0, 'config': 0, 'port_no': 1}], 'n_tables': 2, 'n_bufs': 256L, 'actions': 4095L, 'caps': 135L}'
<type 'str'>
Test in order to send a flow entry when a switch is connected to NOX....
00003|openflow-event|ERR:received Openflow error packet from dpid=000000000001: type=1, code=8, 72 bytes of data2,FEATURES_REPLY=1,HELLO=2,SET_CONFIG=1,FLOW_REMOVED=8,VENDOR=1
Total :: ECHO_REPLY=80,FEATURES_REQUEST=1,PACKET_IN=11,PACKET_OUT=6,ECHO_REQUEST=80,FLOW_MOD=6,ERROR=2,FEATURES_REPLY=1,HELLO=2,SET_CONFIG=1,FLOW_REMOVED=8,VENDOR=1
---Recv---
slicer_test2_dpid=00:00:00:00:00:00:00:01 :: ECHO_REPLY=80,FLOW_MOD=6,FEATURES_REQUEST=1,HELLO=1,SET_CONFIG=1,PACKET_OUT=6,VENDOR=1
Total :: ECHO_REPLY=80,FLOW_MOD=6,FEATURES_REQUEST=1,HELLO=1,SET_CONFIG=1,PACKET_OUT=6,VENDOR=1
---Drop---
Total ::

fvctl getSwitchStats 1
Got reply:
---Sent---
classifier-dpid=00:00:00:00:00:00:00:01 :: ECHO_REQUEST=90,FLOW_MOD=10,FEATURES_REQUEST=3,STATS_REQUEST.DESC=1,HELLO=1,PACKET_OUT=281,SET_CONFIG=1,VENDOR=1
Total :: ECHO_REQUEST=90,FLOW_MOD=10,FEATURES_REQUEST=3,STATS_REQUEST.DESC=1,HELLO=1,PACKET_OUT=281,SET_CONFIG=1,VENDOR=1
---Recv---
classifier-dpid=00:00:00:00:00:00:00:01 :: ECHO_REPLY=90,STATS_REPLY.DESC=1,PACKET_IN=15,ERROR=5,FEATURES_REPLY=3,HELLO=1,FLOW_REMOVED=8
Total :: ECHO_REPLY=90,STATS_REPLY.DESC=1,PACKET_IN=15,ERROR=5,FEATURES_REPLY=3,HELLO=1,FLOW_REMOVED=8
---Drop---
Total ::




EXAMPLE WITH FLOWSPACE MORE SELECTIVE
fvctl addFlowSpace 1 1 dl_src=00:00:00:00:00:02 Slice:test2=7
success: 1055

fvctl addFlowSpace 1 1 dl_dst=00:00:00:00:00:02 Slice:test2=7
success: 1095

(the idea is that to match all pings from/to the device with MAC address  00:00:00:00:00:02

fvctl listFlowSpace
Got reply:
rule 0: FlowEntry[dpid=[00:00:00:00:00:00:00:01],ruleMatch=[OFMatch[dl_src=00:00:00:00:00:02]],actionsList=[Slice:test2=7],id=[1055],priority=[1],]
rule 1: FlowEntry[dpid=[00:00:00:00:00:00:00:01],ruleMatch=[OFMatch[dl_dst=00:00:00:00:00:02]],actionsList=[Slice:test2=7],id=[1095],priority=[1],]

In this manner it will possible launch a ping from h2 to any hosts,




DOCUMENTAZIONE API NOX:
/nox/build/doc/doxygen/html/index.html


register_for_datapath_join
Register a handler for a datapath join event.
The handler will be called with: handler(dpid, attrs).
	dpid' is the datapath id of the switch
	'attrs' is a dictionary with the following keys:

	N_BUFFERS, N_TABLES, CAPABILITIES, ACTIONS, PORTS
	The PORTS value is a list of port dictionaries where each
	dictionary has some convenience bool fields added ('link', 'enabled', 'flood')

Example of the returned dictionary (with values for the key 'ports' with a single element in the list):
'ports': [{'hw_addr': '\x06X\xe9\xf6R\xa1',
   'curr': 192,
   'name': 's1-eth3',
   'speed': 10000,
   'supported': 0,
   'enabled': True,
   'flood': True,
   'state': 0,
   'link': True,
   'advertised': 0,
   'peer': 0,
   'config': 0,
   'port_no': 3},]
	'n_tables': 2,
	'n_bufs': 256L,
	'actions': 4095L,
	'caps': 135L}
