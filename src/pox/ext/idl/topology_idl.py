# Python stubs generated by omniidl from topology.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(3,0, __file__)


#
# Start of module "Topology"
#
__name__ = "Topology"
_0_Topology = omniORB.openModule("Topology", r"topology.idl")
_0_Topology__POA = omniORB.openModule("Topology__POA", r"topology.idl")


# interface Configuration
_0_Topology._d_Configuration = (omniORB.tcInternal.tv_objref, "IDL:Topology/Configuration:1.0", "Configuration")
omniORB.typeMapping["IDL:Topology/Configuration:1.0"] = _0_Topology._d_Configuration
_0_Topology.Configuration = omniORB.newEmptyClass()
class Configuration :
    _NP_RepositoryId = _0_Topology._d_Configuration[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_Topology.Configuration = Configuration
_0_Topology._tc_Configuration = omniORB.tcInternal.createTypeCode(_0_Topology._d_Configuration)
omniORB.registerType(Configuration._NP_RepositoryId, _0_Topology._d_Configuration, _0_Topology._tc_Configuration)

# Configuration operations and attributes
Configuration._d_getTopology = (((omniORB.tcInternal.tv_string,0), ), ((omniORB.tcInternal.tv_string,0), ), None)

# Configuration object reference
class _objref_Configuration (CORBA.Object):
    _NP_RepositoryId = Configuration._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def getTopology(self, *args):
        return _omnipy.invoke(self, "getTopology", _0_Topology.Configuration._d_getTopology, args)

    __methods__ = ["getTopology"] + CORBA.Object.__methods__

omniORB.registerObjref(Configuration._NP_RepositoryId, _objref_Configuration)
_0_Topology._objref_Configuration = _objref_Configuration
del Configuration, _objref_Configuration

# Configuration skeleton
__name__ = "Topology__POA"
class Configuration (PortableServer.Servant):
    _NP_RepositoryId = _0_Topology.Configuration._NP_RepositoryId


    _omni_op_d = {"getTopology": _0_Topology.Configuration._d_getTopology}

Configuration._omni_skeleton = Configuration
_0_Topology__POA.Configuration = Configuration
omniORB.registerSkeleton(Configuration._NP_RepositoryId, Configuration)
del Configuration
__name__ = "Topology"

#
# End of module "Topology"
#
__name__ = "topology_idl"

_exported_modules = ( "Topology", )

# The end.
