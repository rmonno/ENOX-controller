#!/usr/bin/env python
# -*- python -*-

#
# svcbrkd
#
# Copyright (C) 2012 Nextworks s.r.l.
#
# @LICENSE_BEGIN@
# @LICENSE_END@
#
# Written by: Alessandro Canessa    <a DOT canessa AT nextworks DOT it>
#

name_module = "topologymgr"

import sys
import os
import getopt
import inspect
import shlex

class BaseError(Exception):
    def __init__(self, m = None):
        self.message = m

    def __str__(self):
        return self.message

class CommandError(BaseError):
    def __init__(self, message):
        super(CommandError, self).__init__(message)

class WrongParametersCount(CommandError):
    def __init__(self, message):
        super(WrongParametersCount, self).__init__(message)

class WrongParameterType(CommandError):
    def __init__(self, message):
        super(WrongParameterType, self).__init__(message)

class UnknownMessage(BaseError):
    def __init__(self, message):
        super(UnknownMessage, self).__init__(message)

def check_args_count(args, min_count, max_count):
    assert(args is not None)
    assert(min_count is not None)
    assert(max_count is None or min_count <= max_count)

    if len(args) < min_count:
        tmp = "Too few arguments for command, minimum " \
            "%d arguments required" % min_count
        raise WrongParametersCount(tmp)

    if max_count is not None:
        if len(args) > max_count:
            tmp = "Too many arguments for command, " \
                " maximum %d allowed" % max_count
            raise WrongParametersCount(tmp)

def command_exit(parms):
    """Exit from CLI"""
    check_args_count(parms, 0, 0)

    print("Explicit exit ...")
    sys.exit(0)

def command_show(parms):
    """Show DB"""
    check_args_count(parms, 0, 0)

    # XXX FIXME: Insert code here
    print("Show...")

def command_help(parms):
    """Print this help"""
    check_args_count(parms, 0, 0)

    commands = command_handlers.keys()
    commands.sort()

    maxl = 0
    for k in commands:
        maxl = max(maxl, len(k))

    for k in commands:
        # XXX FIXME: Add (autogenerated) sub-command help
        h = inspect.getdoc(command_handlers[k])
        if h is None:
            h = ""
        print(("  %-" + str(maxl) + "s    %s") % (k, h))

command_handlers = {
    'exit'                 : command_exit,
    'help'                 : command_help,
    '?'                    : command_help,

    'show'                 : command_show,
}

def dump_help():
    print(me + " [OPTIONS]")
    print("")
    print("Options:")
    print("    -d, --debug                 set log level to debug")
    print("    -h, --help                  print this help, then exit")
    print("        --version               print version, then exit")
    print("")

def version():
    print("VERSION:")

def dump_version():
    print(me + " (" + version() + ")")

variables = { }

configuration = [ ]

try:
    optlist, args = getopt.getopt(sys.argv[1:],
                                  'c:hVd',
                                   [ "config",
                                   "help",
                                   "version",
                                   "debug"])

    for opt, arg in optlist:
        if opt in ("-h", "--help"):
            dump_help()
        elif opt in ("-V", "--version"):
            dump_version()
        elif opt in ("-d", "--debug"):
            print("Debug mode...")
        elif opt in ("-c", "--config"):
            try:
                f = file(arg, 'U')
                configuration = f.readlines()
                f.close()
            except:
                print("Cannot open file '%s'" % arg)
                sys.exit(1)

except getopt.GetoptError, err:
    dump_help()
except Exception, e:
    message = "Got unhandled exception "
    if (e is not None) :
        message = message + "(" + str(e) + ")"
    print(message)

print(version())
try:
    print("Running....")
except KeyboardInterrupt, e:
    raise e

while True:
    try:
        print("Accepting new line")
        if len(configuration) == 0:
            prompt = name_module + "> "
            line = raw_input(prompt)
        else:
            line = configuration.pop(0)
    except EOFError, e:
        print("")
        continue
    line = line.strip()
    if len(line) == 0:
        continue

    tokens    = shlex.split(line)
    command   = tokens[0]
    arguments = tokens[1:]

    if command[0] == '#':
        continue

    print("Command   = '%s'" % command)
    print("Arguments = '%s'" % str(arguments))

    handler = None

    if not command in command_handlers.keys():
        print("Unknown command '%s'" % command)
        continue

    handler = command_handlers[command]
    assert(handler is not None)
    print("Handler for command '%s' is '%s'" % (command, handler))

    try:
        print("Gonna call handler '%s'" % str(handler))
        handler(arguments)
        print("Handler '%s' has been called" % str(handler))
    except Exception, e:
        print("%s" % str(e))
        continue
