# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyflow_fetcher', [dirname(__file__)])
        except ImportError:
            import _pyflow_fetcher
            return _pyflow_fetcher
        if fp is not None:
            try:
                _mod = imp.load_module('_pyflow_fetcher', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyflow_fetcher = swig_import_helper()
    del swig_import_helper
else:
    import _pyflow_fetcher
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class Flow_fetcher_proxy(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Flow_fetcher_proxy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Flow_fetcher_proxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyflow_fetcher.new_Flow_fetcher_proxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyflow_fetcher.delete_Flow_fetcher_proxy
    __del__ = lambda self : None;
    def cancel(self): return _pyflow_fetcher.Flow_fetcher_proxy_cancel(self)
    def get_status(self): return _pyflow_fetcher.Flow_fetcher_proxy_get_status(self)
    def get_flows(self): return _pyflow_fetcher.Flow_fetcher_proxy_get_flows(self)
Flow_fetcher_proxy_swigregister = _pyflow_fetcher.Flow_fetcher_proxy_swigregister
Flow_fetcher_proxy_swigregister(Flow_fetcher_proxy)

from nox.lib.core import Component

class flow_fetcher_app(Component):
  """
    An adaptor over the C++ based Python bindings to
    simplify their implementation.
  """  
  def __init__(self, ctxt):
    Component.__init__(self, ctxt)

  def getInterface(self):
    return str(flow_fetcher_app)

  def configure(self, configuration):
    pass

  def install(self):
    pass

  # This is the function that you want.
  #
  # Flows satisfying the predicate in 'request' will be fetched from
  # the switch with datapath id 'dpid'.  When the fetch completes
  # (either successfully or with an error), 'cb' will be invoked.
  # (But 'cb' will not be invoked before fetch() returns.)
  #
  # The 'request' takes the form of a dictionary representing an
  # ofp_flow_stats_request, e.g.:
  #   {'table_id': ...table id...,
  #    'match': {'in_port': 0,
  #              'dl_src': 0x002320ed7e64,
  #              'dl_dst': 0x002320ed7e65,
  #              'dl_vlan': 0x234,
  #              'dl_vlan_pcp': 7,
  #              'dl_type': 0x0800,
  #              'nw_proto': 17,
  #              'nw_src': 0x525400123502,
  #              'nw_dst': 0x525400123503,
  #              'tp_src': 1234,
  #              'tp_dst': 5678}}
  # where every member is optional and by its absence indicates a wildcard
  # across that field.  See the definition of
  # from_python<ofp_flow_stats_request> in pyglue.cc for details.
  #
  # Returns a flow fetcher object whose state may be queried to find out the
  # results of the fetch operation or to cancel the operation.  A call to the
  # callback indicates that the flow fetch operation is complete and that the
  # flow fetcher's state will no longer change.
  #
  # The returned flow fetcher object must be saved somewhere or the operation
  # will be canceled.  Typical usage is something like:
  #   ff = ffa.fetch(dpid, flow_stats_request, lambda: report_results(ff))
  # where ffa is the flow_fetcher_app obtained via resolve, e.g. from a
  # Component subclass's install method:
  #   ffa = self.resolve(flow_fetcher_app)
  #
  # See test.py in this directory for example usage.
  def fetch(self, dpid, request, cb):
    return flow_fetcher(self.ctxt, dpid, request, cb)

class flow_fetcher:
  def __init__(self, ctxt, dpid, request, cb):
    self.pff = Flow_fetcher_proxy(ctxt, dpid, request, cb)

  def cancel(self):
    self.pff.cancel()

  def get_status(self):
    return self.pff.get_status()

  def get_flows(self):
    return self.pff.get_flows()

def getFactory():
      class Factory():
          def instance(self, context):
              return flow_fetcher_app(context)

      return Factory()



