# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyswitch_management', [dirname(__file__)])
        except ImportError:
            import _pyswitch_management
            return _pyswitch_management
        if fp is not None:
            try:
                _mod = imp.load_module('_pyswitch_management', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyswitch_management = swig_import_helper()
    del swig_import_helper
else:
    import _pyswitch_management
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


import nox.lib.netinet
class Switch_management_proxy(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Switch_management_proxy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Switch_management_proxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyswitch_management.new_Switch_management_proxy(*args)
        try: self.this.append(this)
        except: self.this = this
    def configure(self, *args): return _pyswitch_management.Switch_management_proxy_configure(self, *args)
    def install(self, *args): return _pyswitch_management.Switch_management_proxy_install(self, *args)
    def get_mgmt_id(self, *args): return _pyswitch_management.Switch_management_proxy_get_mgmt_id(self, *args)
    def switch_mgr_is_active(self, *args): return _pyswitch_management.Switch_management_proxy_switch_mgr_is_active(self, *args)
    def get_port_name(self, *args): return _pyswitch_management.Switch_management_proxy_get_port_name(self, *args)
    def mgmtid_to_system_uuid(self, *args): return _pyswitch_management.Switch_management_proxy_mgmtid_to_system_uuid(self, *args)
    def set_all_entries(self, *args): return _pyswitch_management.Switch_management_proxy_set_all_entries(self, *args)
    __swig_destroy__ = _pyswitch_management.delete_Switch_management_proxy
    __del__ = lambda self : None;
Switch_management_proxy_swigregister = _pyswitch_management.Switch_management_proxy_swigregister
Switch_management_proxy_swigregister(Switch_management_proxy)

class strlist(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, strlist, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, strlist, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyswitch_management.strlist_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyswitch_management.strlist___nonzero__(self)
    def __bool__(self): return _pyswitch_management.strlist___bool__(self)
    def __len__(self): return _pyswitch_management.strlist___len__(self)
    def pop(self): return _pyswitch_management.strlist_pop(self)
    def __getslice__(self, *args): return _pyswitch_management.strlist___getslice__(self, *args)
    def __setslice__(self, *args): return _pyswitch_management.strlist___setslice__(self, *args)
    def __delslice__(self, *args): return _pyswitch_management.strlist___delslice__(self, *args)
    def __delitem__(self, *args): return _pyswitch_management.strlist___delitem__(self, *args)
    def __getitem__(self, *args): return _pyswitch_management.strlist___getitem__(self, *args)
    def __setitem__(self, *args): return _pyswitch_management.strlist___setitem__(self, *args)
    def append(self, *args): return _pyswitch_management.strlist_append(self, *args)
    def empty(self): return _pyswitch_management.strlist_empty(self)
    def size(self): return _pyswitch_management.strlist_size(self)
    def clear(self): return _pyswitch_management.strlist_clear(self)
    def swap(self, *args): return _pyswitch_management.strlist_swap(self, *args)
    def get_allocator(self): return _pyswitch_management.strlist_get_allocator(self)
    def begin(self): return _pyswitch_management.strlist_begin(self)
    def end(self): return _pyswitch_management.strlist_end(self)
    def rbegin(self): return _pyswitch_management.strlist_rbegin(self)
    def rend(self): return _pyswitch_management.strlist_rend(self)
    def pop_back(self): return _pyswitch_management.strlist_pop_back(self)
    def erase(self, *args): return _pyswitch_management.strlist_erase(self, *args)
    def __init__(self, *args): 
        this = _pyswitch_management.new_strlist(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyswitch_management.strlist_push_back(self, *args)
    def front(self): return _pyswitch_management.strlist_front(self)
    def back(self): return _pyswitch_management.strlist_back(self)
    def assign(self, *args): return _pyswitch_management.strlist_assign(self, *args)
    def resize(self, *args): return _pyswitch_management.strlist_resize(self, *args)
    def insert(self, *args): return _pyswitch_management.strlist_insert(self, *args)
    def pop_front(self): return _pyswitch_management.strlist_pop_front(self)
    def push_front(self, *args): return _pyswitch_management.strlist_push_front(self, *args)
    def reverse(self): return _pyswitch_management.strlist_reverse(self)
    __swig_destroy__ = _pyswitch_management.delete_strlist
    __del__ = lambda self : None;
strlist_swigregister = _pyswitch_management.strlist_swigregister
strlist_swigregister(strlist)

from nox.lib.netinet import netinet
from nox.lib.core import Component

class pyswitch_management(Component):
    """
    Provide interface to switch_management from python
    """  
    def __init__(self, ctxt):
        self.smp = Switch_management_proxy(ctxt)

    def configure(self, configuration):
        self.smp.configure(configuration)

    def install(self):
        pass

    def getInterface(self):
        return str(pyswitch_management)

    def get_mgmt_id(self, datapathid):
        return self.smp.get_mgmt_id(datapathid)

    def switch_mgr_is_active(self, mgmt_id):
        return self.smp.switch_mgr_is_active(mgmt_id)

    def get_port_name(self, mgmtid, portid):
        return self.smp.get_port_name(mgmtid, portid)
    
    def mgmtid_to_system_uuid(self, mgmtid):
        return self.smp.mgmtid_to_system_uuid(mgmtid)

    def set_all_entries(self, mgmtid, key, val_tuple):
        s = strlist()
        for v in val_tuple:
            s.push_back(v)
        return self.smp.set_all_entries(mgmtid, key, s)


def getFactory():
      class Factory():
          def instance(self, context):
              return pyswitch_management(context)

      return Factory()



