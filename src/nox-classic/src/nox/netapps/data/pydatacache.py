# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pydatacache', [dirname(__file__)])
        except ImportError:
            import _pydatacache
            return _pydatacache
        if fp is not None:
            try:
                _mod = imp.load_module('_pydatacache', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pydatacache = swig_import_helper()
    del swig_import_helper
else:
    import _pydatacache
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class imaxdiv_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, imaxdiv_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, imaxdiv_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["quot"] = _pydatacache.imaxdiv_t_quot_set
    __swig_getmethods__["quot"] = _pydatacache.imaxdiv_t_quot_get
    if _newclass:quot = _swig_property(_pydatacache.imaxdiv_t_quot_get, _pydatacache.imaxdiv_t_quot_set)
    __swig_setmethods__["rem"] = _pydatacache.imaxdiv_t_rem_set
    __swig_getmethods__["rem"] = _pydatacache.imaxdiv_t_rem_get
    if _newclass:rem = _swig_property(_pydatacache.imaxdiv_t_rem_get, _pydatacache.imaxdiv_t_rem_set)
    def __init__(self): 
        this = _pydatacache.new_imaxdiv_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pydatacache.delete_imaxdiv_t
    __del__ = lambda self : None;
imaxdiv_t_swigregister = _pydatacache.imaxdiv_t_swigregister
imaxdiv_t_swigregister(imaxdiv_t)


def imaxabs(*args):
  return _pydatacache.imaxabs(*args)
imaxabs = _pydatacache.imaxabs

def imaxdiv(*args):
  return _pydatacache.imaxdiv(*args)
imaxdiv = _pydatacache.imaxdiv

def strtoimax(*args):
  return _pydatacache.strtoimax(*args)
strtoimax = _pydatacache.strtoimax

def strtoumax(*args):
  return _pydatacache.strtoumax(*args)
strtoumax = _pydatacache.strtoumax

def wcstoimax(*args):
  return _pydatacache.wcstoimax(*args)
wcstoimax = _pydatacache.wcstoimax

def wcstoumax(*args):
  return _pydatacache.wcstoumax(*args)
wcstoumax = _pydatacache.wcstoumax

def exit(*args):
  return _pydatacache.exit(*args)
exit = _pydatacache.exit
import nox.netapps.data.pydatatypes
PYDATA_CACHE_HH = _pydatacache.PYDATA_CACHE_HH
class PyData_cache(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PyData_cache, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PyData_cache, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pydatacache.new_PyData_cache(*args)
        try: self.this.append(this)
        except: self.this = this
    def configure(self, *args): return _pydatacache.PyData_cache_configure(self, *args)
    def get_authenticated_id(self, *args): return _pydatacache.PyData_cache_get_authenticated_id(self, *args)
    def get_unauthenticated_id(self, *args): return _pydatacache.PyData_cache_get_unauthenticated_id(self, *args)
    def get_unknown_id(self, *args): return _pydatacache.PyData_cache_get_unknown_id(self, *args)
    def get_authenticated_name(self): return _pydatacache.PyData_cache_get_authenticated_name(self)
    def get_unauthenticated_name(self): return _pydatacache.PyData_cache_get_unauthenticated_name(self)
    def get_unknown_name(self): return _pydatacache.PyData_cache_get_unknown_name(self)
    def get_name(self, *args): return _pydatacache.PyData_cache_get_name(self, *args)
    __swig_destroy__ = _pydatacache.delete_PyData_cache
    __del__ = lambda self : None;
PyData_cache_swigregister = _pydatacache.PyData_cache_swigregister
PyData_cache_swigregister(PyData_cache)

class Principal_delete_event(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Principal_delete_event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Principal_delete_event, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pydatacache.new_Principal_delete_event(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["static_get_name"] = lambda x: _pydatacache.Principal_delete_event_static_get_name
    if _newclass:static_get_name = staticmethod(_pydatacache.Principal_delete_event_static_get_name)
    __swig_setmethods__["type"] = _pydatacache.Principal_delete_event_type_set
    __swig_getmethods__["type"] = _pydatacache.Principal_delete_event_type_get
    if _newclass:type = _swig_property(_pydatacache.Principal_delete_event_type_get, _pydatacache.Principal_delete_event_type_set)
    __swig_setmethods__["id"] = _pydatacache.Principal_delete_event_id_set
    __swig_getmethods__["id"] = _pydatacache.Principal_delete_event_id_get
    if _newclass:id = _swig_property(_pydatacache.Principal_delete_event_id_get, _pydatacache.Principal_delete_event_id_set)
    def __str__(self):
        return 'Principal_delete_event '+ 'type: '+str(self.type) +\
               ' , id: ' + str(self.id) +']'

    __swig_getmethods__["fill_python_event"] = lambda x: _pydatacache.Principal_delete_event_fill_python_event
    if _newclass:fill_python_event = staticmethod(_pydatacache.Principal_delete_event_fill_python_event)
    __swig_getmethods__["register_event_converter"] = lambda x: _pydatacache.Principal_delete_event_register_event_converter
    if _newclass:register_event_converter = staticmethod(_pydatacache.Principal_delete_event_register_event_converter)
    __swig_destroy__ = _pydatacache.delete_Principal_delete_event
    __del__ = lambda self : None;
Principal_delete_event_swigregister = _pydatacache.Principal_delete_event_swigregister
Principal_delete_event_swigregister(Principal_delete_event)

def Principal_delete_event_static_get_name():
  return _pydatacache.Principal_delete_event_static_get_name()
Principal_delete_event_static_get_name = _pydatacache.Principal_delete_event_static_get_name

def Principal_delete_event_fill_python_event(*args):
  return _pydatacache.Principal_delete_event_fill_python_event(*args)
Principal_delete_event_fill_python_event = _pydatacache.Principal_delete_event_fill_python_event

def Principal_delete_event_register_event_converter(*args):
  return _pydatacache.Principal_delete_event_register_event_converter(*args)
Principal_delete_event_register_event_converter = _pydatacache.Principal_delete_event_register_event_converter



