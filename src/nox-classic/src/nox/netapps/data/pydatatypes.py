# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pydatatypes', [dirname(__file__)])
        except ImportError:
            import _pydatatypes
            return _pydatatypes
        if fp is not None:
            try:
                _mod = imp.load_module('_pydatatypes', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pydatatypes = swig_import_helper()
    del swig_import_helper
else:
    import _pydatatypes
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class imaxdiv_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, imaxdiv_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, imaxdiv_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["quot"] = _pydatatypes.imaxdiv_t_quot_set
    __swig_getmethods__["quot"] = _pydatatypes.imaxdiv_t_quot_get
    if _newclass:quot = _swig_property(_pydatatypes.imaxdiv_t_quot_get, _pydatatypes.imaxdiv_t_quot_set)
    __swig_setmethods__["rem"] = _pydatatypes.imaxdiv_t_rem_set
    __swig_getmethods__["rem"] = _pydatatypes.imaxdiv_t_rem_get
    if _newclass:rem = _swig_property(_pydatatypes.imaxdiv_t_rem_get, _pydatatypes.imaxdiv_t_rem_set)
    def __init__(self): 
        this = _pydatatypes.new_imaxdiv_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pydatatypes.delete_imaxdiv_t
    __del__ = lambda self : None;
imaxdiv_t_swigregister = _pydatatypes.imaxdiv_t_swigregister
imaxdiv_t_swigregister(imaxdiv_t)


def imaxabs(*args):
  return _pydatatypes.imaxabs(*args)
imaxabs = _pydatatypes.imaxabs

def imaxdiv(*args):
  return _pydatatypes.imaxdiv(*args)
imaxdiv = _pydatatypes.imaxdiv

def strtoimax(*args):
  return _pydatatypes.strtoimax(*args)
strtoimax = _pydatatypes.strtoimax

def strtoumax(*args):
  return _pydatatypes.strtoumax(*args)
strtoumax = _pydatatypes.strtoumax

def wcstoimax(*args):
  return _pydatatypes.wcstoimax(*args)
wcstoimax = _pydatatypes.wcstoimax

def wcstoumax(*args):
  return _pydatatypes.wcstoumax(*args)
wcstoumax = _pydatatypes.wcstoumax

def exit(*args):
  return _pydatatypes.exit(*args)
exit = _pydatatypes.exit
PYDATATYPES_HH = _pydatatypes.PYDATATYPES_HH
class PyDatatypes(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PyDatatypes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PyDatatypes, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pydatatypes.new_PyDatatypes(*args)
        try: self.this.append(this)
        except: self.this = this
    def configure(self, *args): return _pydatatypes.PyDatatypes_configure(self, *args)
    def switch_type(self): return _pydatatypes.PyDatatypes_switch_type(self)
    def location_type(self): return _pydatatypes.PyDatatypes_location_type(self)
    def host_type(self): return _pydatatypes.PyDatatypes_host_type(self)
    def host_netid_type(self): return _pydatatypes.PyDatatypes_host_netid_type(self)
    def user_type(self): return _pydatatypes.PyDatatypes_user_type(self)
    def address_type(self): return _pydatatypes.PyDatatypes_address_type(self)
    def group_type(self): return _pydatatypes.PyDatatypes_group_type(self)
    def group_member_type(self): return _pydatatypes.PyDatatypes_group_member_type(self)
    def mac_type(self): return _pydatatypes.PyDatatypes_mac_type(self)
    def ipv4_cidr_type(self): return _pydatatypes.PyDatatypes_ipv4_cidr_type(self)
    def ipv6_type(self): return _pydatatypes.PyDatatypes_ipv6_type(self)
    def alias_type(self): return _pydatatypes.PyDatatypes_alias_type(self)
    def datasource_type(self, *args): return _pydatatypes.PyDatatypes_datasource_type(self, *args)
    def external_type(self, *args): return _pydatatypes.PyDatatypes_external_type(self, *args)
    def attribute_type(self, *args): return _pydatatypes.PyDatatypes_attribute_type(self, *args)
    def principal_table_name(self, *args): return _pydatatypes.PyDatatypes_principal_table_name(self, *args)
    def principal_string(self, *args): return _pydatatypes.PyDatatypes_principal_string(self, *args)
    def address_string(self, *args): return _pydatatypes.PyDatatypes_address_string(self, *args)
    def datasource_string(self, *args): return _pydatatypes.PyDatatypes_datasource_string(self, *args)
    def external_string(self, *args): return _pydatatypes.PyDatatypes_external_string(self, *args)
    def attribute_string(self, *args): return _pydatatypes.PyDatatypes_attribute_string(self, *args)
    def set_switch_type(self, *args): return _pydatatypes.PyDatatypes_set_switch_type(self, *args)
    def set_location_type(self, *args): return _pydatatypes.PyDatatypes_set_location_type(self, *args)
    def set_host_type(self, *args): return _pydatatypes.PyDatatypes_set_host_type(self, *args)
    def set_host_netid_type(self, *args): return _pydatatypes.PyDatatypes_set_host_netid_type(self, *args)
    def set_user_type(self, *args): return _pydatatypes.PyDatatypes_set_user_type(self, *args)
    def set_address_type(self, *args): return _pydatatypes.PyDatatypes_set_address_type(self, *args)
    def set_group_type(self, *args): return _pydatatypes.PyDatatypes_set_group_type(self, *args)
    def set_group_member_type(self, *args): return _pydatatypes.PyDatatypes_set_group_member_type(self, *args)
    def set_mac_type(self, *args): return _pydatatypes.PyDatatypes_set_mac_type(self, *args)
    def set_ipv4_cidr_type(self, *args): return _pydatatypes.PyDatatypes_set_ipv4_cidr_type(self, *args)
    def set_ipv6_type(self, *args): return _pydatatypes.PyDatatypes_set_ipv6_type(self, *args)
    def set_alias_type(self, *args): return _pydatatypes.PyDatatypes_set_alias_type(self, *args)
    def set_datasource_type(self, *args): return _pydatatypes.PyDatatypes_set_datasource_type(self, *args)
    def set_external_type(self, *args): return _pydatatypes.PyDatatypes_set_external_type(self, *args)
    def set_attribute_type(self, *args): return _pydatatypes.PyDatatypes_set_attribute_type(self, *args)
    def unset_principal_type(self, *args): return _pydatatypes.PyDatatypes_unset_principal_type(self, *args)
    def unset_address_type(self, *args): return _pydatatypes.PyDatatypes_unset_address_type(self, *args)
    def unset_datasource_type(self, *args): return _pydatatypes.PyDatatypes_unset_datasource_type(self, *args)
    def unset_external_type(self, *args): return _pydatatypes.PyDatatypes_unset_external_type(self, *args)
    def unset_attribute_type(self, *args): return _pydatatypes.PyDatatypes_unset_attribute_type(self, *args)
    __swig_destroy__ = _pydatatypes.delete_PyDatatypes
    __del__ = lambda self : None;
PyDatatypes_swigregister = _pydatatypes.PyDatatypes_swigregister
PyDatatypes_swigregister(PyDatatypes)



