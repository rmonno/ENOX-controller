# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyrouting', [dirname(__file__)])
        except ImportError:
            import _pyrouting
            return _pyrouting
        if fp is not None:
            try:
                _mod = imp.load_module('_pyrouting', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyrouting = swig_import_helper()
    del swig_import_helper
else:
    import _pyrouting
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


import nox.lib.netinet
import nox.lib.openflow
CONTROLLER_PYROUTEGLUE_HH = _pyrouting.CONTROLLER_PYROUTEGLUE_HH
class PyRouting_module(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PyRouting_module, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PyRouting_module, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyrouting.new_PyRouting_module(*args)
        try: self.this.append(this)
        except: self.this = this
    def configure(self, *args): return _pyrouting.PyRouting_module_configure(self, *args)
    def get_route(self, *args): return _pyrouting.PyRouting_module_get_route(self, *args)
    def check_route(self, *args): return _pyrouting.PyRouting_module_check_route(self, *args)
    def setup_route(self, *args): return _pyrouting.PyRouting_module_setup_route(self, *args)
    def setup_flow(self, *args): return _pyrouting.PyRouting_module_setup_flow(self, *args)
    def send_packet(self, *args): return _pyrouting.PyRouting_module_send_packet(self, *args)
    __swig_destroy__ = _pyrouting.delete_PyRouting_module
    __del__ = lambda self : None;
PyRouting_module_swigregister = _pyrouting.PyRouting_module_swigregister
PyRouting_module_swigregister(PyRouting_module)

class Link(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Link, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Link, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dst"] = _pyrouting.Link_dst_set
    __swig_getmethods__["dst"] = _pyrouting.Link_dst_get
    if _newclass:dst = _swig_property(_pyrouting.Link_dst_get, _pyrouting.Link_dst_set)
    __swig_setmethods__["outport"] = _pyrouting.Link_outport_set
    __swig_getmethods__["outport"] = _pyrouting.Link_outport_get
    if _newclass:outport = _swig_property(_pyrouting.Link_outport_get, _pyrouting.Link_outport_set)
    __swig_setmethods__["inport"] = _pyrouting.Link_inport_set
    __swig_getmethods__["inport"] = _pyrouting.Link_inport_get
    if _newclass:inport = _swig_property(_pyrouting.Link_inport_get, _pyrouting.Link_inport_set)
    def __init__(self): 
        this = _pyrouting.new_Link()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyrouting.delete_Link
    __del__ = lambda self : None;
Link_swigregister = _pyrouting.Link_swigregister
Link_swigregister(Link)

class linklist(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, linklist, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, linklist, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyrouting.linklist_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyrouting.linklist___nonzero__(self)
    def __bool__(self): return _pyrouting.linklist___bool__(self)
    def __len__(self): return _pyrouting.linklist___len__(self)
    def pop(self): return _pyrouting.linklist_pop(self)
    def __getslice__(self, *args): return _pyrouting.linklist___getslice__(self, *args)
    def __setslice__(self, *args): return _pyrouting.linklist___setslice__(self, *args)
    def __delslice__(self, *args): return _pyrouting.linklist___delslice__(self, *args)
    def __delitem__(self, *args): return _pyrouting.linklist___delitem__(self, *args)
    def __getitem__(self, *args): return _pyrouting.linklist___getitem__(self, *args)
    def __setitem__(self, *args): return _pyrouting.linklist___setitem__(self, *args)
    def append(self, *args): return _pyrouting.linklist_append(self, *args)
    def empty(self): return _pyrouting.linklist_empty(self)
    def size(self): return _pyrouting.linklist_size(self)
    def clear(self): return _pyrouting.linklist_clear(self)
    def swap(self, *args): return _pyrouting.linklist_swap(self, *args)
    def get_allocator(self): return _pyrouting.linklist_get_allocator(self)
    def begin(self): return _pyrouting.linklist_begin(self)
    def end(self): return _pyrouting.linklist_end(self)
    def rbegin(self): return _pyrouting.linklist_rbegin(self)
    def rend(self): return _pyrouting.linklist_rend(self)
    def pop_back(self): return _pyrouting.linklist_pop_back(self)
    def erase(self, *args): return _pyrouting.linklist_erase(self, *args)
    def __init__(self, *args): 
        this = _pyrouting.new_linklist(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyrouting.linklist_push_back(self, *args)
    def front(self): return _pyrouting.linklist_front(self)
    def back(self): return _pyrouting.linklist_back(self)
    def assign(self, *args): return _pyrouting.linklist_assign(self, *args)
    def resize(self, *args): return _pyrouting.linklist_resize(self, *args)
    def insert(self, *args): return _pyrouting.linklist_insert(self, *args)
    def pop_front(self): return _pyrouting.linklist_pop_front(self)
    def push_front(self, *args): return _pyrouting.linklist_push_front(self, *args)
    def reverse(self): return _pyrouting.linklist_reverse(self)
    __swig_destroy__ = _pyrouting.delete_linklist
    __del__ = lambda self : None;
linklist_swigregister = _pyrouting.linklist_swigregister
linklist_swigregister(linklist)

class RouteId(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RouteId, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RouteId, name)
    __repr__ = _swig_repr
    __swig_setmethods__["src"] = _pyrouting.RouteId_src_set
    __swig_getmethods__["src"] = _pyrouting.RouteId_src_get
    if _newclass:src = _swig_property(_pyrouting.RouteId_src_get, _pyrouting.RouteId_src_set)
    __swig_setmethods__["dst"] = _pyrouting.RouteId_dst_set
    __swig_getmethods__["dst"] = _pyrouting.RouteId_dst_get
    if _newclass:dst = _swig_property(_pyrouting.RouteId_dst_get, _pyrouting.RouteId_dst_set)
    def __init__(self): 
        this = _pyrouting.new_RouteId()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyrouting.delete_RouteId
    __del__ = lambda self : None;
RouteId_swigregister = _pyrouting.RouteId_swigregister
RouteId_swigregister(RouteId)

class Route(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Route, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Route, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _pyrouting.Route_id_set
    __swig_getmethods__["id"] = _pyrouting.Route_id_get
    if _newclass:id = _swig_property(_pyrouting.Route_id_get, _pyrouting.Route_id_set)
    __swig_setmethods__["path"] = _pyrouting.Route_path_set
    __swig_getmethods__["path"] = _pyrouting.Route_path_get
    if _newclass:path = _swig_property(_pyrouting.Route_path_get, _pyrouting.Route_path_set)
    def __init__(self): 
        this = _pyrouting.new_Route()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyrouting.delete_Route
    __del__ = lambda self : None;
Route_swigregister = _pyrouting.Route_swigregister
Route_swigregister(Route)


def dp_on_route(*args):
  return _pyrouting.dp_on_route(*args)
dp_on_route = _pyrouting.dp_on_route
from nox.lib.core import Component

class PyRouting(Component):
    def __init__(self, ctxt):
        Component.__init__(self, ctxt)
        self.routing = PyRouting_module(ctxt)

    def configure(self, configuration):
        self.routing.configure(configuration)         

    def getInterface(self):
        return str(PyRouting)

    def get_route(self, route):
        return self.routing.get_route(route)

    def check_route(self, route, inport, outport):
        return self.routing.check_route(route, inport, outport)

    # eventually add actions
    def setup_route(self, flow, route, inport, outport,
                    flow_timeout, bufs, check_nat):
        return self.routing.setup_route(flow, route, inport, outport,
                                        flow_timeout, bufs, check_nat)

    def setup_flow(self, flow, dp, outport, bid, buf, timeout,
                   actions, check_nat):
        return self.routing.setup_flow(flow, dp, outport, bid,
                                       buf, timeout, actions, check_nat)

    def send_packet(self, dp, inport, outport, bid, buf,
                    actions, check_nat, flow):
        return self.routing.send_packet(dp, inport, outport, bid,
                                        buf, actions, check_nat, flow)

def getFactory():
    class Factory():
        def instance(self, context):
            return PyRouting(context)

    return Factory()



