# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pynatenforcer', [dirname(__file__)])
        except ImportError:
            import _pynatenforcer
            return _pynatenforcer
        if fp is not None:
            try:
                _mod = imp.load_module('_pynatenforcer', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pynatenforcer = swig_import_helper()
    del swig_import_helper
else:
    import _pynatenforcer
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class imaxdiv_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, imaxdiv_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, imaxdiv_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["quot"] = _pynatenforcer.imaxdiv_t_quot_set
    __swig_getmethods__["quot"] = _pynatenforcer.imaxdiv_t_quot_get
    if _newclass:quot = _swig_property(_pynatenforcer.imaxdiv_t_quot_get, _pynatenforcer.imaxdiv_t_quot_set)
    __swig_setmethods__["rem"] = _pynatenforcer.imaxdiv_t_rem_set
    __swig_getmethods__["rem"] = _pynatenforcer.imaxdiv_t_rem_get
    if _newclass:rem = _swig_property(_pynatenforcer.imaxdiv_t_rem_get, _pynatenforcer.imaxdiv_t_rem_set)
    def __init__(self): 
        this = _pynatenforcer.new_imaxdiv_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pynatenforcer.delete_imaxdiv_t
    __del__ = lambda self : None;
imaxdiv_t_swigregister = _pynatenforcer.imaxdiv_t_swigregister
imaxdiv_t_swigregister(imaxdiv_t)


def imaxabs(*args):
  return _pynatenforcer.imaxabs(*args)
imaxabs = _pynatenforcer.imaxabs

def imaxdiv(*args):
  return _pynatenforcer.imaxdiv(*args)
imaxdiv = _pynatenforcer.imaxdiv

def strtoimax(*args):
  return _pynatenforcer.strtoimax(*args)
strtoimax = _pynatenforcer.strtoimax

def strtoumax(*args):
  return _pynatenforcer.strtoumax(*args)
strtoumax = _pynatenforcer.strtoumax

def wcstoimax(*args):
  return _pynatenforcer.wcstoimax(*args)
wcstoimax = _pynatenforcer.wcstoimax

def wcstoumax(*args):
  return _pynatenforcer.wcstoumax(*args)
wcstoumax = _pynatenforcer.wcstoumax

def exit(*args):
  return _pynatenforcer.exit(*args)
exit = _pynatenforcer.exit
import nox.netapps.authenticator.pyflowutil
import nox.lib.netinet
PYNAT_ENFORCER_GLUE_HH = _pynatenforcer.PYNAT_ENFORCER_GLUE_HH
class PyNAT_enforcer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PyNAT_enforcer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PyNAT_enforcer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pynatenforcer.new_PyNAT_enforcer(*args)
        try: self.this.append(this)
        except: self.this = this
    def configure(self, *args): return _pynatenforcer.PyNAT_enforcer_configure(self, *args)
    def add_rule(self, *args): return _pynatenforcer.PyNAT_enforcer_add_rule(self, *args)
    def build(self): return _pynatenforcer.PyNAT_enforcer_build(self)
    def change_rule_priority(self, *args): return _pynatenforcer.PyNAT_enforcer_change_rule_priority(self, *args)
    def delete_rule(self, *args): return _pynatenforcer.PyNAT_enforcer_delete_rule(self, *args)
    def reset(self): return _pynatenforcer.PyNAT_enforcer_reset(self)
    __swig_destroy__ = _pynatenforcer.delete_PyNAT_enforcer
    __del__ = lambda self : None;
PyNAT_enforcer_swigregister = _pynatenforcer.PyNAT_enforcer_swigregister
PyNAT_enforcer_swigregister(PyNAT_enforcer)

from nox.lib.core import Component

class PyNatEnforcer(Component):
    def __init__(self, ctxt):
        self.enforcer = PyNAT_enforcer(ctxt)

    def configure(self, configuration):
        self.enforcer.configure(configuration)

    def getInterface(self):
        return str(PyNatEnforcer)

    def add_rule(self, pri, expr, action):
        return self.enforcer.add_rule(pri, expr, action)

    def build(self):
        self.enforcer.build()

    def change_rule_priority(self, id, priority):
        return self.enforcer.change_rule_priority(id, priority)

    def delete_rule(self, id):
        return self.enforcer.delete_rule(id)

    def reset(self):
        self.enforcer.reset()

def getFactory():
    class Factory():
        def instance(self, context):
            return PyNatEnforcer(context)

    return Factory()




