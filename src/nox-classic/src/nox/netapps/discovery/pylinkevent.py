# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pylinkevent', [dirname(__file__)])
        except ImportError:
            import _pylinkevent
            return _pylinkevent
        if fp is not None:
            try:
                _mod = imp.load_module('_pylinkevent', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pylinkevent = swig_import_helper()
    del swig_import_helper
else:
    import _pylinkevent
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


import nox.lib.netinet
class Link_event(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Link_event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Link_event, name)
    __repr__ = _swig_repr
    ADD = _pylinkevent.Link_event_ADD
    REMOVE = _pylinkevent.Link_event_REMOVE
    def __init__(self, *args): 
        this = _pylinkevent.new_Link_event(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["dpsrc"] = _pylinkevent.Link_event_dpsrc_set
    __swig_getmethods__["dpsrc"] = _pylinkevent.Link_event_dpsrc_get
    if _newclass:dpsrc = _swig_property(_pylinkevent.Link_event_dpsrc_get, _pylinkevent.Link_event_dpsrc_set)
    __swig_setmethods__["dpdst"] = _pylinkevent.Link_event_dpdst_set
    __swig_getmethods__["dpdst"] = _pylinkevent.Link_event_dpdst_get
    if _newclass:dpdst = _swig_property(_pylinkevent.Link_event_dpdst_get, _pylinkevent.Link_event_dpdst_set)
    __swig_setmethods__["sport"] = _pylinkevent.Link_event_sport_set
    __swig_getmethods__["sport"] = _pylinkevent.Link_event_sport_get
    if _newclass:sport = _swig_property(_pylinkevent.Link_event_sport_get, _pylinkevent.Link_event_sport_set)
    __swig_setmethods__["dport"] = _pylinkevent.Link_event_dport_set
    __swig_getmethods__["dport"] = _pylinkevent.Link_event_dport_get
    if _newclass:dport = _swig_property(_pylinkevent.Link_event_dport_get, _pylinkevent.Link_event_dport_set)
    __swig_setmethods__["action"] = _pylinkevent.Link_event_action_set
    __swig_getmethods__["action"] = _pylinkevent.Link_event_action_get
    if _newclass:action = _swig_property(_pylinkevent.Link_event_action_get, _pylinkevent.Link_event_action_set)
    __swig_getmethods__["static_get_name"] = lambda x: _pylinkevent.Link_event_static_get_name
    if _newclass:static_get_name = staticmethod(_pylinkevent.Link_event_static_get_name)
    def __str__(self):
        action_map = {0:'ADD',1:'REMOVE'}
        return 'Link_event '+action_map[self.action]+' [dpsrc: '\
               +str(self.dpsrc)+' sport: ' + str(self.sport) + ' dpdst: '\
               +str(self.dpdst)+' dport: ' + str(self.dport) + ']'

    __swig_getmethods__["fill_python_event"] = lambda x: _pylinkevent.Link_event_fill_python_event
    if _newclass:fill_python_event = staticmethod(_pylinkevent.Link_event_fill_python_event)
    __swig_getmethods__["register_event_converter"] = lambda x: _pylinkevent.Link_event_register_event_converter
    if _newclass:register_event_converter = staticmethod(_pylinkevent.Link_event_register_event_converter)
    __swig_destroy__ = _pylinkevent.delete_Link_event
    __del__ = lambda self : None;
Link_event_swigregister = _pylinkevent.Link_event_swigregister
Link_event_swigregister(Link_event)

def Link_event_static_get_name():
  return _pylinkevent.Link_event_static_get_name()
Link_event_static_get_name = _pylinkevent.Link_event_static_get_name

def Link_event_fill_python_event(*args):
  return _pylinkevent.Link_event_fill_python_event(*args)
Link_event_fill_python_event = _pylinkevent.Link_event_fill_python_event

def Link_event_register_event_converter(*args):
  return _pylinkevent.Link_event_register_event_converter(*args)
Link_event_register_event_converter = _pylinkevent.Link_event_register_event_converter



