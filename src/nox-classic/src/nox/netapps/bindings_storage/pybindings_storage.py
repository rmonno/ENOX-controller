# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pybindings_storage', [dirname(__file__)])
        except ImportError:
            import _pybindings_storage
            return _pybindings_storage
        if fp is not None:
            try:
                _mod = imp.load_module('_pybindings_storage', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pybindings_storage = swig_import_helper()
    del swig_import_helper
else:
    import _pybindings_storage
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


import nox.lib.netinet
class Name(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Name, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Name, name)
    __repr__ = _swig_repr
    NONE = _pybindings_storage.Name_NONE
    LOCATION = _pybindings_storage.Name_LOCATION
    HOST = _pybindings_storage.Name_HOST
    USER = _pybindings_storage.Name_USER
    SWITCH = _pybindings_storage.Name_SWITCH
    PORT = _pybindings_storage.Name_PORT
    LOC_TUPLE = _pybindings_storage.Name_LOC_TUPLE
    LOCATION_GROUP = _pybindings_storage.Name_LOCATION_GROUP
    HOST_GROUP = _pybindings_storage.Name_HOST_GROUP
    USER_GROUP = _pybindings_storage.Name_USER_GROUP
    SWITCH_GROUP = _pybindings_storage.Name_SWITCH_GROUP
    def __init__(self, *args): 
        this = _pybindings_storage.new_Name(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["name"] = _pybindings_storage.Name_name_set
    __swig_getmethods__["name"] = _pybindings_storage.Name_name_get
    if _newclass:name = _swig_property(_pybindings_storage.Name_name_get, _pybindings_storage.Name_name_set)
    __swig_setmethods__["name_type"] = _pybindings_storage.Name_name_type_set
    __swig_getmethods__["name_type"] = _pybindings_storage.Name_name_type_get
    if _newclass:name_type = _swig_property(_pybindings_storage.Name_name_type_get, _pybindings_storage.Name_name_type_set)
    __swig_setmethods__["id"] = _pybindings_storage.Name_id_set
    __swig_getmethods__["id"] = _pybindings_storage.Name_id_get
    if _newclass:id = _swig_property(_pybindings_storage.Name_id_get, _pybindings_storage.Name_id_set)
    def __eq__(self, *args): return _pybindings_storage.Name___eq__(self, *args)
    def __lt__(self, *args): return _pybindings_storage.Name___lt__(self, *args)
    __swig_destroy__ = _pybindings_storage.delete_Name
    __del__ = lambda self : None;
Name_swigregister = _pybindings_storage.Name_swigregister
Name_swigregister(Name)

class Loc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Loc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Loc, name)
    __repr__ = _swig_repr
    NO_PORT = _pybindings_storage.Loc_NO_PORT
    def __init__(self, *args): 
        this = _pybindings_storage.new_Loc(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["dpid"] = _pybindings_storage.Loc_dpid_set
    __swig_getmethods__["dpid"] = _pybindings_storage.Loc_dpid_get
    if _newclass:dpid = _swig_property(_pybindings_storage.Loc_dpid_get, _pybindings_storage.Loc_dpid_set)
    __swig_setmethods__["port"] = _pybindings_storage.Loc_port_set
    __swig_getmethods__["port"] = _pybindings_storage.Loc_port_get
    if _newclass:port = _swig_property(_pybindings_storage.Loc_port_get, _pybindings_storage.Loc_port_set)
    def __eq__(self, *args): return _pybindings_storage.Loc___eq__(self, *args)
    def __lt__(self, *args): return _pybindings_storage.Loc___lt__(self, *args)
    __swig_destroy__ = _pybindings_storage.delete_Loc
    __del__ = lambda self : None;
Loc_swigregister = _pybindings_storage.Loc_swigregister
Loc_swigregister(Loc)

BINDINGS_STORAGE_PROXY_HH = _pybindings_storage.BINDINGS_STORAGE_PROXY_HH
class Bindings_Storage_Proxy(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bindings_Storage_Proxy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bindings_Storage_Proxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybindings_storage.new_Bindings_Storage_Proxy(*args)
        try: self.this.append(this)
        except: self.this = this
    def configure(self, *args): return _pybindings_storage.Bindings_Storage_Proxy_configure(self, *args)
    def install(self, *args): return _pybindings_storage.Bindings_Storage_Proxy_install(self, *args)
    def get_names_by_ap(self, *args): return _pybindings_storage.Bindings_Storage_Proxy_get_names_by_ap(self, *args)
    def get_names_by_mac(self, *args): return _pybindings_storage.Bindings_Storage_Proxy_get_names_by_mac(self, *args)
    def get_names_by_ip(self, *args): return _pybindings_storage.Bindings_Storage_Proxy_get_names_by_ip(self, *args)
    def get_names(self, *args): return _pybindings_storage.Bindings_Storage_Proxy_get_names(self, *args)
    def get_host_users(self, *args): return _pybindings_storage.Bindings_Storage_Proxy_get_host_users(self, *args)
    def get_user_hosts(self, *args): return _pybindings_storage.Bindings_Storage_Proxy_get_user_hosts(self, *args)
    def get_all_names(self, *args): return _pybindings_storage.Bindings_Storage_Proxy_get_all_names(self, *args)
    def get_entities_by_name(self, *args): return _pybindings_storage.Bindings_Storage_Proxy_get_entities_by_name(self, *args)
    def get_links(self, *args): return _pybindings_storage.Bindings_Storage_Proxy_get_links(self, *args)
    def get_all_links(self, *args): return _pybindings_storage.Bindings_Storage_Proxy_get_all_links(self, *args)
    def add_link(self, *args): return _pybindings_storage.Bindings_Storage_Proxy_add_link(self, *args)
    def remove_link(self, *args): return _pybindings_storage.Bindings_Storage_Proxy_remove_link(self, *args)
    def clear_links(self): return _pybindings_storage.Bindings_Storage_Proxy_clear_links(self)
    def get_names_for_location(self, *args): return _pybindings_storage.Bindings_Storage_Proxy_get_names_for_location(self, *args)
    def get_location_by_name(self, *args): return _pybindings_storage.Bindings_Storage_Proxy_get_location_by_name(self, *args)
    __swig_destroy__ = _pybindings_storage.delete_Bindings_Storage_Proxy
    __del__ = lambda self : None;
Bindings_Storage_Proxy_swigregister = _pybindings_storage.Bindings_Storage_Proxy_swigregister
Bindings_Storage_Proxy_swigregister(Bindings_Storage_Proxy)

from nox.lib.core import Component
from twisted.internet import defer 
from twisted.python.failure import Failure
from nox.lib.netinet.netinet import *

import logging

lg = logging.getLogger('nox.netapps.bindings_storage')

class pybindings_storage(Component):
    """
    Python interface for the Bindings_Storage class 
    """  
    def __init__(self, ctxt):
        self.proxy = Bindings_Storage_Proxy(ctxt)

    def configure(self, configuration):
        self.proxy.configure(configuration)

    def getInterface(self):
        return str(pybindings_storage)

    # callback gets a list of (name,name_type) tuples
    def get_names(self, dpid, port, mac, ip, cb):
        self.proxy.get_names(dpid, port, mac, ip, cb) 

    def get_names_query(self, q, loc_tuples, cb):
        self.proxy.get_names(q, loc_tuples, cb)

    def get_names_by_ap(self, dpid, port, cb):
        self.proxy.get_names_by_ap(dpid, port, cb) 

    def get_names_by_mac(self, mac, cb):
        self.proxy.get_names_by_mac(mac, cb)
    
    def get_names_by_ip(self, ip, cb):
        self.proxy.get_names_by_ip(ip, cb)
    
    def get_all_names(self, name_type, cb):
        self.proxy.get_all_names(name_type, cb) 

    def get_host_users(self, hostname, cb):
        self.proxy.get_host_users(hostname, cb) 

    def get_user_hosts(self, username, cb):
        self.proxy.get_user_hosts(username, cb) 

    # callback gets a list of (dpid,port,mac,ip) tuples
    def get_entities_by_name(self, name, name_type, cb):
        self.proxy.get_entities_by_name(name, name_type, cb)

    def add_link(self, dpid1, port1, dpid2, port2):
      self.proxy.add_link(dpid1, port1, dpid2, port2)
    
    def remove_link(self, dpid1, port1, dpid2, port2):
      self.proxy.remove_link(dpid1, port1, dpid2, port2)

    def get_all_links(self, cb): 
      self.proxy.get_all_links(cb) 
  
    def get_switch_links(self, dpid, cb):
      self.proxy.get_links(dpid, cb)
    
    def get_links(self, dpid, port, cb):
      self.proxy.get_links(dpid, port, cb)
  
    def clear_links(self):
        self.proxy.clear_links()

    def get_names_for_location(self, dpid, port, name_type, cb):
        self.proxy.get_names_for_location(dpid, port, name_type, cb)

    # note: calling this with a port name (e.g., 'eth0') 
    # will get you all locations that have that name
    # You should use get_location_by_switchport_name() instead
    def get_location_by_name(self, name, name_type, cb):
        self.proxy.get_location_by_name(name, name_type, cb) 

    def get_location_by_switchport_name(self, switchname, portname, cb): 

      def cb1(loc_list1):
        if len(loc_list1) == 0: 
          cb([]) 
          return 
        elif len(loc_list1) > 1: 
          print("Lookup for switch '%s' got multiple dpids" % switchname)
        dpid = loc_list1[0][0] 
        
        def cb2(loc_list2): 
          for loc in loc_list2: 
            if loc[0] == dpid: 
              cb([loc]) 
              return 
          cb([])
        
        self.proxy.get_location_by_name(portname, Name.PORT, cb2)

      self.proxy.get_location_by_name(switchname, Name.SWITCH, cb1) 

    # note: if multiple hostnames are bound to an IP address, 
    # this method aribtrarily chooses one of them  
    def get_netinfos_by_ip(self, ip):
      d = defer.Deferred()
      def filter_netinfos(netinfos): 
          matching = [] 
          for ni in netinfos:
            if ni[3] == ip:
              matching.append(ni) 
          d.callback(matching) 

      def process_names(names): 
          for name, type, id in names: 
            if type == Name.HOST: 
              self.get_entities_by_name(id, type, filter_netinfos)
              return
          ip_obj = ipaddr(ip)
          d.errback(Failure("no hostname in binding storage for IP : %s" \
             % str(ip_obj)))

      self.get_names_by_ip(ip, process_names)
      return d

def getFactory():
      class Factory():
          def instance(self, context):
              return pybindings_storage(context)

      return Factory()



