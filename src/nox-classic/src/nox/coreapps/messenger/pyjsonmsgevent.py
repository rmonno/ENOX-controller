# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyjsonmsgevent', [dirname(__file__)])
        except ImportError:
            import _pyjsonmsgevent
            return _pyjsonmsgevent
        if fp is not None:
            try:
                _mod = imp.load_module('_pyjsonmsgevent', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyjsonmsgevent = swig_import_helper()
    del swig_import_helper
else:
    import _pyjsonmsgevent
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


import nox.coreapps.pyrt.pycomponent
class imaxdiv_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, imaxdiv_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, imaxdiv_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["quot"] = _pyjsonmsgevent.imaxdiv_t_quot_set
    __swig_getmethods__["quot"] = _pyjsonmsgevent.imaxdiv_t_quot_get
    if _newclass:quot = _swig_property(_pyjsonmsgevent.imaxdiv_t_quot_get, _pyjsonmsgevent.imaxdiv_t_quot_set)
    __swig_setmethods__["rem"] = _pyjsonmsgevent.imaxdiv_t_rem_set
    __swig_getmethods__["rem"] = _pyjsonmsgevent.imaxdiv_t_rem_get
    if _newclass:rem = _swig_property(_pyjsonmsgevent.imaxdiv_t_rem_get, _pyjsonmsgevent.imaxdiv_t_rem_set)
    def __init__(self): 
        this = _pyjsonmsgevent.new_imaxdiv_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyjsonmsgevent.delete_imaxdiv_t
    __del__ = lambda self : None;
imaxdiv_t_swigregister = _pyjsonmsgevent.imaxdiv_t_swigregister
imaxdiv_t_swigregister(imaxdiv_t)


def imaxabs(*args):
  return _pyjsonmsgevent.imaxabs(*args)
imaxabs = _pyjsonmsgevent.imaxabs

def imaxdiv(*args):
  return _pyjsonmsgevent.imaxdiv(*args)
imaxdiv = _pyjsonmsgevent.imaxdiv

def strtoimax(*args):
  return _pyjsonmsgevent.strtoimax(*args)
strtoimax = _pyjsonmsgevent.strtoimax

def strtoumax(*args):
  return _pyjsonmsgevent.strtoumax(*args)
strtoumax = _pyjsonmsgevent.strtoumax

def wcstoimax(*args):
  return _pyjsonmsgevent.wcstoimax(*args)
wcstoimax = _pyjsonmsgevent.wcstoimax

def wcstoumax(*args):
  return _pyjsonmsgevent.wcstoumax(*args)
wcstoumax = _pyjsonmsgevent.wcstoumax

def exit(*args):
  return _pyjsonmsgevent.exit(*args)
exit = _pyjsonmsgevent.exit
class JSON_reply(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, JSON_reply, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, JSON_reply, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sock"] = _pyjsonmsgevent.JSON_reply_sock_set
    __swig_getmethods__["sock"] = _pyjsonmsgevent.JSON_reply_sock_get
    if _newclass:sock = _swig_property(_pyjsonmsgevent.JSON_reply_sock_get, _pyjsonmsgevent.JSON_reply_sock_set)
    def __init__(self): 
        this = _pyjsonmsgevent.new_JSON_reply()
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args): return _pyjsonmsgevent.JSON_reply___call__(self, *args)
    __swig_destroy__ = _pyjsonmsgevent.delete_JSON_reply
    __del__ = lambda self : None;
JSON_reply_swigregister = _pyjsonmsgevent.JSON_reply_swigregister
JSON_reply_swigregister(JSON_reply)

class JSONMsg_event(nox.coreapps.pyrt.pycomponent.Event):
    __swig_setmethods__ = {}
    for _s in [nox.coreapps.pyrt.pycomponent.Event]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, JSONMsg_event, name, value)
    __swig_getmethods__ = {}
    for _s in [nox.coreapps.pyrt.pycomponent.Event]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, JSONMsg_event, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pyjsonmsgevent.delete_JSONMsg_event
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _pyjsonmsgevent.new_JSONMsg_event(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["static_get_name"] = lambda x: _pyjsonmsgevent.JSONMsg_event_static_get_name
    if _newclass:static_get_name = staticmethod(_pyjsonmsgevent.JSONMsg_event_static_get_name)
    __swig_setmethods__["sock"] = _pyjsonmsgevent.JSONMsg_event_sock_set
    __swig_getmethods__["sock"] = _pyjsonmsgevent.JSONMsg_event_sock_get
    if _newclass:sock = _swig_property(_pyjsonmsgevent.JSONMsg_event_sock_get, _pyjsonmsgevent.JSONMsg_event_sock_set)
    __swig_setmethods__["jsonobj"] = _pyjsonmsgevent.JSONMsg_event_jsonobj_set
    __swig_getmethods__["jsonobj"] = _pyjsonmsgevent.JSONMsg_event_jsonobj_get
    if _newclass:jsonobj = _swig_property(_pyjsonmsgevent.JSONMsg_event_jsonobj_get, _pyjsonmsgevent.JSONMsg_event_jsonobj_set)
    def __str__(self):
        return 'JSONMsg_event jsonobj->get_string())'

    __swig_getmethods__["fill_python_event"] = lambda x: _pyjsonmsgevent.JSONMsg_event_fill_python_event
    if _newclass:fill_python_event = staticmethod(_pyjsonmsgevent.JSONMsg_event_fill_python_event)
    __swig_getmethods__["register_event_converter"] = lambda x: _pyjsonmsgevent.JSONMsg_event_register_event_converter
    if _newclass:register_event_converter = staticmethod(_pyjsonmsgevent.JSONMsg_event_register_event_converter)
JSONMsg_event_swigregister = _pyjsonmsgevent.JSONMsg_event_swigregister
JSONMsg_event_swigregister(JSONMsg_event)

def JSONMsg_event_static_get_name():
  return _pyjsonmsgevent.JSONMsg_event_static_get_name()
JSONMsg_event_static_get_name = _pyjsonmsgevent.JSONMsg_event_static_get_name

def JSONMsg_event_fill_python_event(*args):
  return _pyjsonmsgevent.JSONMsg_event_fill_python_event(*args)
JSONMsg_event_fill_python_event = _pyjsonmsgevent.JSONMsg_event_fill_python_event

def JSONMsg_event_register_event_converter(*args):
  return _pyjsonmsgevent.JSONMsg_event_register_event_converter(*args)
JSONMsg_event_register_event_converter = _pyjsonmsgevent.JSONMsg_event_register_event_converter



