//
//  This file is part of gmpls-nextworks
//
//  Copyright (C) 2006, 2007, 2008, 2009, 2010, 2011 Nextworks s.r.l.
//
//  @LICENSE_BEGIN@
//  @LICENSE_END@
//
//  Giacomo Bernini       <g DOT bernini AT nextworks DOT it>
//  Gino Carrozzo         <g DOT carrozzo AT nextworks DOT it>
//  Nicola Ciulli         <n DOT ciulli AT nextworks DOT it>
//  Francesco Salvestrini <f DOT salvestrini AT nextworks DOT it>
//  Roberto Monno         <r DOT monno AT nextworks.it>
//

#ifndef TOPOLOGY_IDL
#define TOPOLOGY_IDL

#include "types.idl"
#include "gmpls.idl"

module TOPOLOGY {

        exception InternalProblems {
                string   what;
        };

        exception CannotFetchNode {
                gmplsTypes::nodeIdent  id;
                string                 what;
        };

        exception NodeAlreadyExists {
                gmplsTypes::nodeIdent  id;
                string                 what;
        };

        exception NodeParamsMismatch {
                gmplsTypes::nodeIdent  id;
                string                 what;
        };

        exception CannotFetchLink {
                gmplsTypes::teLinkIdent  id;
                string                   what;
        };

        exception LinkAlreadyExists {
                gmplsTypes::teLinkIdent  id;
                string                   what;
        };

        exception LinkParamsMismatch {
                gmplsTypes::teLinkIdent  id;
                string                   what;
        };

        exception CannotFetchTna {
                gmplsTypes::tnaIdent     id;
                string                   what;
        };

        exception TnaAlreadyExists {
                gmplsTypes::tnaIdent     id;
                string                   what;
        };

        exception InvocationNotAllowed {
                string   methodName;
        };

        interface Info {
                //
                //  Topology related calls
                //
                void
                nodeAdd(in  gmplsTypes::nodeIdent  id)
                        raises(NodeAlreadyExists,
                               InternalProblems,
                               InvocationNotAllowed);

                void
                nodeDel(in  gmplsTypes::nodeIdent  id)
                        raises(CannotFetchNode,
                               InternalProblems,
                               InvocationNotAllowed);

                gmplsTypes::nodeIdentSeq
                nodeGetAll()
                        raises(InternalProblems,
                               InvocationNotAllowed);

                void
                netNodeUpdate(in  gmplsTypes::nodeId         id,
                              in  gmplsTypes::netNodeParams  info)
                        raises(CannotFetchNode,
                               NodeParamsMismatch,
                               InternalProblems,
                               InvocationNotAllowed);

                void
                netNodeUpdatePower(in  gmplsTypes::nodeId     id,
                                   in  gmplsTypes::powerType  powerConsumption)
                        raises(CannotFetchNode,
                               NodeParamsMismatch,
                               InternalProblems,
                               InvocationNotAllowed);

                void
                netNodeGet(in  gmplsTypes::nodeId           id,
                           out gmplsTypes::netNodeParams    info)
                        raises(CannotFetchNode,
                               InternalProblems,
                               InvocationNotAllowed);

                // TNA related
                void
                tnaIdAdd(in  gmplsTypes::tnaIdent  ident)
                        raises(CannotFetchNode,
                               TnaAlreadyExists,
                               InternalProblems,
                               InvocationNotAllowed);

                void
                tnaIdDel(in  gmplsTypes::tnaIdent  ident)
                        raises(CannotFetchNode,
                               CannotFetchTna,
                               InternalProblems,
                               InvocationNotAllowed);

                gmplsTypes::tnaIdentSeq
                tnaIdsGetAllFromNode(in gmplsTypes::nodeId  node,
                                     in boolean             isDomain)
                        raises(CannotFetchNode,
                               InternalProblems,
                               InvocationNotAllowed);


                // Link related
                void
                linkAdd(in  gmplsTypes::teLinkIdent ident)
                        raises(CannotFetchNode,
                               LinkAlreadyExists,
                               InternalProblems,
                               InvocationNotAllowed);

                void
                linkDel(in  gmplsTypes::teLinkIdent ident)
                        raises(CannotFetchNode,
                               CannotFetchLink,
                               InternalProblems,
                               InvocationNotAllowed);

                gmplsTypes::teLinkIdentSeq
                teLinkGetAllFromNode(in gmplsTypes::nodeIdent  ident)
                        raises(CannotFetchNode,
                               InternalProblems,
                               InvocationNotAllowed);

                // link capabilities
                void
                teLinkUpdateCom(in  gmplsTypes::teLinkIdent      ident,
                                in  gmplsTypes::teLinkComParams  info)
                        raises(CannotFetchNode,
                               CannotFetchLink,
                               LinkParamsMismatch,
                               InternalProblems,
                               InvocationNotAllowed);

                void
                teLinkGetCom(in  gmplsTypes::teLinkIdent       ident,
                             out gmplsTypes::teLinkComParams   info)
                        raises(CannotFetchNode,
                               CannotFetchLink,
                               InternalProblems,
                               InvocationNotAllowed);

                void
                teLinkUpdateTdm(in gmplsTypes::teLinkIdent     ident,
                                in gmplsTypes::teLinkTdmParams info)
                        raises(CannotFetchNode,
                               CannotFetchLink,
                               LinkParamsMismatch,
                               InternalProblems,
                               InvocationNotAllowed);

                void
                teLinkGetTdm(in  gmplsTypes::teLinkIdent       ident,
                             out gmplsTypes::teLinkTdmParams   info)
                        raises(CannotFetchNode,
                               CannotFetchLink,
                               InternalProblems,
                               InvocationNotAllowed);

                void
                teLinkUpdateLscG709(in gmplsTypes::teLinkIdent         ident,
                                    in gmplsTypes::teLinkLscG709Params info)
                        raises(CannotFetchNode,
                               CannotFetchLink,
                               LinkParamsMismatch,
                               InternalProblems,
                               InvocationNotAllowed);

                void
                teLinkGetLscG709(in  gmplsTypes::teLinkIdent           ident,
                                 out gmplsTypes::teLinkLscG709Params   info)
                        raises(CannotFetchNode,
                               CannotFetchLink,
                               InternalProblems,
                               InvocationNotAllowed);

                void
                teLinkUpdateLscWdm(in gmplsTypes::teLinkIdent          ident,
                                   in gmplsTypes::teLinkLscWdmParams   info)
                        raises(CannotFetchNode,
                               CannotFetchLink,
                               LinkParamsMismatch,
                               InternalProblems,
                               InvocationNotAllowed);

                void
                teLinkGetLscWdm(in  gmplsTypes::teLinkIdent            ident,
                                out gmplsTypes::teLinkLscWdmParams     info)
                        raises(CannotFetchNode,
                               CannotFetchLink,
                               InternalProblems,
                               InvocationNotAllowed);

                // link states
                void
                teLinkUpdateStates(in gmplsTypes::teLinkIdent  ident,
                                   in gmplsTypes::statesBundle states)
                        raises(CannotFetchNode,
                               CannotFetchLink,
                               LinkParamsMismatch,
                               InternalProblems,
                               InvocationNotAllowed);

                void
                teLinkGetStates(in  gmplsTypes::teLinkIdent    ident,
                                out gmplsTypes::statesBundle   states)
                        raises(CannotFetchNode,
                               CannotFetchLink,
                               InternalProblems,
                               InvocationNotAllowed);


                // link bandwidth
                void
                teLinkUpdateGenBw(in gmplsTypes::teLinkIdent  ident,
                                  in gmplsTypes::bwPerPrio    availBw)
                        raises(CannotFetchNode,
                               CannotFetchLink,
                               LinkParamsMismatch,
                               InternalProblems,
                               InvocationNotAllowed);

                void
                teLinkGetGenBw(in  gmplsTypes::teLinkIdent  ident,
                               out gmplsTypes::bwPerPrio    availBw)
                        raises(CannotFetchNode,
                               CannotFetchLink,
                               InternalProblems,
                               InvocationNotAllowed);

                void
                teLinkUpdatePscDynData(in gmplsTypes::teLinkIdent     ident,
                                       in gmplsTypes::teLinkPscParams data)
                        raises(CannotFetchNode,
                               CannotFetchLink,
                               LinkParamsMismatch,
                               InternalProblems,
                               InvocationNotAllowed);

                void
                teLinkGetPscDynData(in  gmplsTypes::teLinkIdent     ident,
                                    out gmplsTypes::teLinkPscParams data)
                        raises(CannotFetchNode,
                               CannotFetchLink,
                               LinkParamsMismatch,
                               InternalProblems,
                               InvocationNotAllowed);

                void
                teLinkUpdateTdmBw(in gmplsTypes::teLinkIdent   ident,
                                  in gmplsTypes::freeCTPSeq    freeTS)
                        raises(CannotFetchNode,
                               CannotFetchLink,
                               LinkParamsMismatch,
                               InternalProblems,
                               InvocationNotAllowed);

                void
                teLinkGetTdmBw(in  gmplsTypes::teLinkIdent     ident,
                               out gmplsTypes::freeCTPSeq      freeTS)
                        raises(CannotFetchNode,
                               CannotFetchLink,
                               InternalProblems,
                               InvocationNotAllowed);

                void
                teLinkUpdateLscG709Bw(in gmplsTypes::teLinkIdent  ident,
                                      in gmplsTypes::freeCTPSeq   freeODUk,
                                      in gmplsTypes::freeCTPSeq   freeOCh)
                        raises(CannotFetchNode,
                               CannotFetchLink,
                               LinkParamsMismatch,
                               InternalProblems,
                               InvocationNotAllowed);

                void
                teLinkGetLscG709Bw(in  gmplsTypes::teLinkIdent  ident,
                                   out gmplsTypes::freeCTPSeq   freeODUk,
                                   out gmplsTypes::freeCTPSeq   freeOCh)
                        raises(CannotFetchNode,
                               CannotFetchLink,
                               InternalProblems,
                               InvocationNotAllowed);

                void
                teLinkUpdateLscWdmBw(in gmplsTypes::teLinkIdent        ident,
                                     in gmplsTypes::teLinkWdmLambdasBitmap bm)
                        raises(CannotFetchNode,
                               CannotFetchLink,
                               LinkParamsMismatch,
                               InternalProblems,
                               InvocationNotAllowed);

                void
                teLinkGetLscWdmBw(in  gmplsTypes::teLinkIdent          ident,
                                  out gmplsTypes::teLinkWdmLambdasBitmap bm)
                        raises(CannotFetchNode,
                               CannotFetchLink,
                               InternalProblems,
                               InvocationNotAllowed);

                // append operations
                void
                teLinkAppendSrlgs(in gmplsTypes::teLinkIdent   ident,
                                  in gmplsTypes::srlgSeq       srlgs)
                        raises(CannotFetchNode,
                               CannotFetchLink,
                               LinkParamsMismatch,
                               InternalProblems,
                               InvocationNotAllowed);

                void
                teLinkGetSrlgs(in  gmplsTypes::teLinkIdent     ident,
                               out gmplsTypes::srlgSeq         srlgs)
                        raises(CannotFetchNode,
                               CannotFetchLink,
                               InternalProblems,
                               InvocationNotAllowed);

                void
                teLinkAppendCalendar(in gmplsTypes::teLinkIdent        ident,
                                     in gmplsTypes::teLinkCalendarSeq  cal)
                        raises(CannotFetchNode,
                               CannotFetchLink,
                               LinkParamsMismatch,
                               InternalProblems,
                               InvocationNotAllowed);

                void
                teLinkGetCalendar(in  gmplsTypes::teLinkIdent          ident,
                                  out gmplsTypes::teLinkCalendarSeq    cal)
                        raises(CannotFetchNode,
                               CannotFetchLink,
                               InternalProblems,
                               InvocationNotAllowed);

                void
                teLinkAppendIsc(in gmplsTypes::teLinkIdent     ident,
                                in gmplsTypes::iscSeq          iscs)
                        raises(CannotFetchNode,
                               CannotFetchLink,
                               LinkParamsMismatch,
                               InternalProblems,
                               InvocationNotAllowed);

                void
                teLinkGetIsc(in  gmplsTypes::teLinkIdent       ident,
                             out gmplsTypes::iscSeq            iscs)
                        raises(CannotFetchNode,
                               CannotFetchLink,
                               InternalProblems,
                               InvocationNotAllowed);

                void
                teLinkUpdateObscBwCal(in gmplsTypes::teLinkIdent        ident,
                                      in gmplsTypes::teLinkObscBwInfoSeq cal)
                        raises(CannotFetchNode,
                               CannotFetchLink,
                               LinkParamsMismatch,
                               InternalProblems,
                               InvocationNotAllowed);

                void
                teLinkGetObscBwCal(in  gmplsTypes::teLinkIdent        ident,
                                   out gmplsTypes::teLinkObscBwInfoSeq cal)
                        raises(CannotFetchNode,
                               CannotFetchLink,
                               LinkParamsMismatch,
                               InternalProblems,
                               InvocationNotAllowed);

                void
                teLinkUpdatePower(in  gmplsTypes::teLinkIdent  ident,
                                  in  gmplsTypes::powerType    powerConsumption)
                        raises(CannotFetchNode,
                               NodeParamsMismatch,
                               InternalProblems,
                               InvocationNotAllowed);

                void
                teLinkUpdateOpaqueBitmap(in gmplsTypes::teLinkIdent           ident,
                                         in gmplsTypes::TELinkOpaqueBitmapSeq info)
                        raises(CannotFetchNode,
                               CannotFetchLink,
                               InternalProblems,
                               InvocationNotAllowed);

                void
                teLinkGetOpaqueBitmap(in gmplsTypes::teLinkIdent            ident,
                                      out gmplsTypes::TELinkOpaqueBitmapSeq info)
                        raises(CannotFetchNode,
                               CannotFetchLink,
                               InternalProblems,
                               InvocationNotAllowed);
        };
};

#endif
