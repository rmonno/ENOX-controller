# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pycomponent', [dirname(__file__)])
        except ImportError:
            import _pycomponent
            return _pycomponent
        if fp is not None:
            try:
                _mod = imp.load_module('_pycomponent', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pycomponent = swig_import_helper()
    del swig_import_helper
else:
    import _pycomponent
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pycomponent.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _pycomponent.SwigPyIterator_value(self)
    def incr(self, n = 1): return _pycomponent.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _pycomponent.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _pycomponent.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _pycomponent.SwigPyIterator_equal(self, *args)
    def copy(self): return _pycomponent.SwigPyIterator_copy(self)
    def next(self): return _pycomponent.SwigPyIterator_next(self)
    def __next__(self): return _pycomponent.SwigPyIterator___next__(self)
    def previous(self): return _pycomponent.SwigPyIterator_previous(self)
    def advance(self, *args): return _pycomponent.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _pycomponent.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _pycomponent.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _pycomponent.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _pycomponent.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _pycomponent.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _pycomponent.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _pycomponent.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

NOT_INSTALLED = _pycomponent.NOT_INSTALLED
DESCRIBED = _pycomponent.DESCRIBED
LOADED = _pycomponent.LOADED
FACTORY_INSTANTIATED = _pycomponent.FACTORY_INSTANTIATED
INSTANTIATED = _pycomponent.INSTANTIATED
CONFIGURED = _pycomponent.CONFIGURED
INSTALLED = _pycomponent.INSTALLED
ERROR = _pycomponent.ERROR
class Component_context(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Component_context, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Component_context, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pycomponent.new_Component_context(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycomponent.delete_Component_context
    __del__ = lambda self : None;
    def get_state(self): return _pycomponent.Component_context_get_state(self)
    def get_required_state(self): return _pycomponent.Component_context_get_required_state(self)
    def get_status(self): return _pycomponent.Component_context_get_status(self)
    def get_name(self): return _pycomponent.Component_context_get_name(self)
Component_context_swigregister = _pycomponent.Component_context_swigregister
Component_context_swigregister(Component_context)

class CContextList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CContextList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CContextList, name)
    __repr__ = _swig_repr
    def iterator(self): return _pycomponent.CContextList_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pycomponent.CContextList___nonzero__(self)
    def __bool__(self): return _pycomponent.CContextList___bool__(self)
    def __len__(self): return _pycomponent.CContextList___len__(self)
    def pop(self): return _pycomponent.CContextList_pop(self)
    def __getslice__(self, *args): return _pycomponent.CContextList___getslice__(self, *args)
    def __setslice__(self, *args): return _pycomponent.CContextList___setslice__(self, *args)
    def __delslice__(self, *args): return _pycomponent.CContextList___delslice__(self, *args)
    def __delitem__(self, *args): return _pycomponent.CContextList___delitem__(self, *args)
    def __getitem__(self, *args): return _pycomponent.CContextList___getitem__(self, *args)
    def __setitem__(self, *args): return _pycomponent.CContextList___setitem__(self, *args)
    def append(self, *args): return _pycomponent.CContextList_append(self, *args)
    def empty(self): return _pycomponent.CContextList_empty(self)
    def size(self): return _pycomponent.CContextList_size(self)
    def clear(self): return _pycomponent.CContextList_clear(self)
    def swap(self, *args): return _pycomponent.CContextList_swap(self, *args)
    def get_allocator(self): return _pycomponent.CContextList_get_allocator(self)
    def begin(self): return _pycomponent.CContextList_begin(self)
    def end(self): return _pycomponent.CContextList_end(self)
    def rbegin(self): return _pycomponent.CContextList_rbegin(self)
    def rend(self): return _pycomponent.CContextList_rend(self)
    def pop_back(self): return _pycomponent.CContextList_pop_back(self)
    def erase(self, *args): return _pycomponent.CContextList_erase(self, *args)
    def __init__(self, *args): 
        this = _pycomponent.new_CContextList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pycomponent.CContextList_push_back(self, *args)
    def front(self): return _pycomponent.CContextList_front(self)
    def back(self): return _pycomponent.CContextList_back(self)
    def assign(self, *args): return _pycomponent.CContextList_assign(self, *args)
    def resize(self, *args): return _pycomponent.CContextList_resize(self, *args)
    def insert(self, *args): return _pycomponent.CContextList_insert(self, *args)
    def pop_front(self): return _pycomponent.CContextList_pop_front(self)
    def push_front(self, *args): return _pycomponent.CContextList_push_front(self, *args)
    def remove(self, *args): return _pycomponent.CContextList_remove(self, *args)
    def unique(self): return _pycomponent.CContextList_unique(self)
    def reverse(self): return _pycomponent.CContextList_reverse(self)
    def sort(self): return _pycomponent.CContextList_sort(self)
    def merge(self, *args): return _pycomponent.CContextList_merge(self, *args)
    __swig_destroy__ = _pycomponent.delete_CContextList
    __del__ = lambda self : None;
CContextList_swigregister = _pycomponent.CContextList_swigregister
CContextList_swigregister(CContextList)

class Kernel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Kernel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Kernel, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def uptime(self): return _pycomponent.Kernel_uptime(self)
    def uuid(self): return _pycomponent.Kernel_uuid(self)
    def restarts(self): return _pycomponent.Kernel_restarts(self)
    def get_all(self): return _pycomponent.Kernel_get_all(self)
    __swig_destroy__ = _pycomponent.delete_Kernel
    __del__ = lambda self : None;
Kernel_swigregister = _pycomponent.Kernel_swigregister
Kernel_swigregister(Kernel)

CONTINUE = _pycomponent.CONTINUE
STOP = _pycomponent.STOP
class Event(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Event, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pycomponent.delete_Event
    __del__ = lambda self : None;
    def get_class_name(self): return _pycomponent.Event_get_class_name(self)
Event_swigregister = _pycomponent.Event_swigregister
Event_swigregister(Event)

class pyevent(Event):
    __swig_setmethods__ = {}
    for _s in [Event]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, pyevent, name, value)
    __swig_getmethods__ = {}
    for _s in [Event]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, pyevent, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pycomponent.new_pyevent(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycomponent.delete_pyevent
    __del__ = lambda self : None;
pyevent_swigregister = _pycomponent.pyevent_swigregister
pyevent_swigregister(pyevent)

class Datapath_join_event(Event):
    __swig_setmethods__ = {}
    for _s in [Event]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Datapath_join_event, name, value)
    __swig_getmethods__ = {}
    for _s in [Event]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Datapath_join_event, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["static_get_name"] = lambda x: _pycomponent.Datapath_join_event_static_get_name
    if _newclass:static_get_name = staticmethod(_pycomponent.Datapath_join_event_static_get_name)
    __swig_destroy__ = _pycomponent.delete_Datapath_join_event
    __del__ = lambda self : None;
Datapath_join_event_swigregister = _pycomponent.Datapath_join_event_swigregister
Datapath_join_event_swigregister(Datapath_join_event)

def Datapath_join_event_static_get_name():
  return _pycomponent.Datapath_join_event_static_get_name()
Datapath_join_event_static_get_name = _pycomponent.Datapath_join_event_static_get_name

class Datapath_leave_event(Event):
    __swig_setmethods__ = {}
    for _s in [Event]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Datapath_leave_event, name, value)
    __swig_getmethods__ = {}
    for _s in [Event]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Datapath_leave_event, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["static_get_name"] = lambda x: _pycomponent.Datapath_leave_event_static_get_name
    if _newclass:static_get_name = staticmethod(_pycomponent.Datapath_leave_event_static_get_name)
    __swig_destroy__ = _pycomponent.delete_Datapath_leave_event
    __del__ = lambda self : None;
Datapath_leave_event_swigregister = _pycomponent.Datapath_leave_event_swigregister
Datapath_leave_event_swigregister(Datapath_leave_event)

def Datapath_leave_event_static_get_name():
  return _pycomponent.Datapath_leave_event_static_get_name()
Datapath_leave_event_static_get_name = _pycomponent.Datapath_leave_event_static_get_name

class Switch_mgr_join_event(Event):
    __swig_setmethods__ = {}
    for _s in [Event]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Switch_mgr_join_event, name, value)
    __swig_getmethods__ = {}
    for _s in [Event]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Switch_mgr_join_event, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["static_get_name"] = lambda x: _pycomponent.Switch_mgr_join_event_static_get_name
    if _newclass:static_get_name = staticmethod(_pycomponent.Switch_mgr_join_event_static_get_name)
    __swig_destroy__ = _pycomponent.delete_Switch_mgr_join_event
    __del__ = lambda self : None;
Switch_mgr_join_event_swigregister = _pycomponent.Switch_mgr_join_event_swigregister
Switch_mgr_join_event_swigregister(Switch_mgr_join_event)

def Switch_mgr_join_event_static_get_name():
  return _pycomponent.Switch_mgr_join_event_static_get_name()
Switch_mgr_join_event_static_get_name = _pycomponent.Switch_mgr_join_event_static_get_name

class Switch_mgr_leave_event(Event):
    __swig_setmethods__ = {}
    for _s in [Event]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Switch_mgr_leave_event, name, value)
    __swig_getmethods__ = {}
    for _s in [Event]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Switch_mgr_leave_event, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["static_get_name"] = lambda x: _pycomponent.Switch_mgr_leave_event_static_get_name
    if _newclass:static_get_name = staticmethod(_pycomponent.Switch_mgr_leave_event_static_get_name)
    __swig_destroy__ = _pycomponent.delete_Switch_mgr_leave_event
    __del__ = lambda self : None;
Switch_mgr_leave_event_swigregister = _pycomponent.Switch_mgr_leave_event_swigregister
Switch_mgr_leave_event_swigregister(Switch_mgr_leave_event)

def Switch_mgr_leave_event_static_get_name():
  return _pycomponent.Switch_mgr_leave_event_static_get_name()
Switch_mgr_leave_event_static_get_name = _pycomponent.Switch_mgr_leave_event_static_get_name

class Flow_removed_event(Event):
    __swig_setmethods__ = {}
    for _s in [Event]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Flow_removed_event, name, value)
    __swig_getmethods__ = {}
    for _s in [Event]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Flow_removed_event, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["static_get_name"] = lambda x: _pycomponent.Flow_removed_event_static_get_name
    if _newclass:static_get_name = staticmethod(_pycomponent.Flow_removed_event_static_get_name)
    __swig_destroy__ = _pycomponent.delete_Flow_removed_event
    __del__ = lambda self : None;
Flow_removed_event_swigregister = _pycomponent.Flow_removed_event_swigregister
Flow_removed_event_swigregister(Flow_removed_event)

def Flow_removed_event_static_get_name():
  return _pycomponent.Flow_removed_event_static_get_name()
Flow_removed_event_static_get_name = _pycomponent.Flow_removed_event_static_get_name

class Flow_mod_event(Event):
    __swig_setmethods__ = {}
    for _s in [Event]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Flow_mod_event, name, value)
    __swig_getmethods__ = {}
    for _s in [Event]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Flow_mod_event, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["static_get_name"] = lambda x: _pycomponent.Flow_mod_event_static_get_name
    if _newclass:static_get_name = staticmethod(_pycomponent.Flow_mod_event_static_get_name)
    __swig_destroy__ = _pycomponent.delete_Flow_mod_event
    __del__ = lambda self : None;
Flow_mod_event_swigregister = _pycomponent.Flow_mod_event_swigregister
Flow_mod_event_swigregister(Flow_mod_event)

def Flow_mod_event_static_get_name():
  return _pycomponent.Flow_mod_event_static_get_name()
Flow_mod_event_static_get_name = _pycomponent.Flow_mod_event_static_get_name

class Packet_in_event(Event):
    __swig_setmethods__ = {}
    for _s in [Event]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Packet_in_event, name, value)
    __swig_getmethods__ = {}
    for _s in [Event]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Packet_in_event, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["static_get_name"] = lambda x: _pycomponent.Packet_in_event_static_get_name
    if _newclass:static_get_name = staticmethod(_pycomponent.Packet_in_event_static_get_name)
    __swig_destroy__ = _pycomponent.delete_Packet_in_event
    __del__ = lambda self : None;
Packet_in_event_swigregister = _pycomponent.Packet_in_event_swigregister
Packet_in_event_swigregister(Packet_in_event)

def Packet_in_event_static_get_name():
  return _pycomponent.Packet_in_event_static_get_name()
Packet_in_event_static_get_name = _pycomponent.Packet_in_event_static_get_name

class Echo_request_event(Event):
    __swig_setmethods__ = {}
    for _s in [Event]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Echo_request_event, name, value)
    __swig_getmethods__ = {}
    for _s in [Event]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Echo_request_event, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["static_get_name"] = lambda x: _pycomponent.Echo_request_event_static_get_name
    if _newclass:static_get_name = staticmethod(_pycomponent.Echo_request_event_static_get_name)
    __swig_destroy__ = _pycomponent.delete_Echo_request_event
    __del__ = lambda self : None;
Echo_request_event_swigregister = _pycomponent.Echo_request_event_swigregister
Echo_request_event_swigregister(Echo_request_event)

def Echo_request_event_static_get_name():
  return _pycomponent.Echo_request_event_static_get_name()
Echo_request_event_static_get_name = _pycomponent.Echo_request_event_static_get_name

class Port_status_event(Event):
    __swig_setmethods__ = {}
    for _s in [Event]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Port_status_event, name, value)
    __swig_getmethods__ = {}
    for _s in [Event]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Port_status_event, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["static_get_name"] = lambda x: _pycomponent.Port_status_event_static_get_name
    if _newclass:static_get_name = staticmethod(_pycomponent.Port_status_event_static_get_name)
    __swig_destroy__ = _pycomponent.delete_Port_status_event
    __del__ = lambda self : None;
Port_status_event_swigregister = _pycomponent.Port_status_event_swigregister
Port_status_event_swigregister(Port_status_event)

def Port_status_event_static_get_name():
  return _pycomponent.Port_status_event_static_get_name()
Port_status_event_static_get_name = _pycomponent.Port_status_event_static_get_name

class Bootstrap_complete_event(Event):
    __swig_setmethods__ = {}
    for _s in [Event]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bootstrap_complete_event, name, value)
    __swig_getmethods__ = {}
    for _s in [Event]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bootstrap_complete_event, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["static_get_name"] = lambda x: _pycomponent.Bootstrap_complete_event_static_get_name
    if _newclass:static_get_name = staticmethod(_pycomponent.Bootstrap_complete_event_static_get_name)
    __swig_destroy__ = _pycomponent.delete_Bootstrap_complete_event
    __del__ = lambda self : None;
Bootstrap_complete_event_swigregister = _pycomponent.Bootstrap_complete_event_swigregister
Bootstrap_complete_event_swigregister(Bootstrap_complete_event)

def Bootstrap_complete_event_static_get_name():
  return _pycomponent.Bootstrap_complete_event_static_get_name()
Bootstrap_complete_event_static_get_name = _pycomponent.Bootstrap_complete_event_static_get_name

class Table_stats_in_event(Event):
    __swig_setmethods__ = {}
    for _s in [Event]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Table_stats_in_event, name, value)
    __swig_getmethods__ = {}
    for _s in [Event]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Table_stats_in_event, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["static_get_name"] = lambda x: _pycomponent.Table_stats_in_event_static_get_name
    if _newclass:static_get_name = staticmethod(_pycomponent.Table_stats_in_event_static_get_name)
    __swig_destroy__ = _pycomponent.delete_Table_stats_in_event
    __del__ = lambda self : None;
Table_stats_in_event_swigregister = _pycomponent.Table_stats_in_event_swigregister
Table_stats_in_event_swigregister(Table_stats_in_event)

def Table_stats_in_event_static_get_name():
  return _pycomponent.Table_stats_in_event_static_get_name()
Table_stats_in_event_static_get_name = _pycomponent.Table_stats_in_event_static_get_name

class Port_stats_in_event(Event):
    __swig_setmethods__ = {}
    for _s in [Event]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Port_stats_in_event, name, value)
    __swig_getmethods__ = {}
    for _s in [Event]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Port_stats_in_event, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["static_get_name"] = lambda x: _pycomponent.Port_stats_in_event_static_get_name
    if _newclass:static_get_name = staticmethod(_pycomponent.Port_stats_in_event_static_get_name)
    __swig_destroy__ = _pycomponent.delete_Port_stats_in_event
    __del__ = lambda self : None;
Port_stats_in_event_swigregister = _pycomponent.Port_stats_in_event_swigregister
Port_stats_in_event_swigregister(Port_stats_in_event)

def Port_stats_in_event_static_get_name():
  return _pycomponent.Port_stats_in_event_static_get_name()
Port_stats_in_event_static_get_name = _pycomponent.Port_stats_in_event_static_get_name

class Aggregate_stats_in_event(Event):
    __swig_setmethods__ = {}
    for _s in [Event]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Aggregate_stats_in_event, name, value)
    __swig_getmethods__ = {}
    for _s in [Event]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Aggregate_stats_in_event, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["static_get_name"] = lambda x: _pycomponent.Aggregate_stats_in_event_static_get_name
    if _newclass:static_get_name = staticmethod(_pycomponent.Aggregate_stats_in_event_static_get_name)
    __swig_destroy__ = _pycomponent.delete_Aggregate_stats_in_event
    __del__ = lambda self : None;
Aggregate_stats_in_event_swigregister = _pycomponent.Aggregate_stats_in_event_swigregister
Aggregate_stats_in_event_swigregister(Aggregate_stats_in_event)

def Aggregate_stats_in_event_static_get_name():
  return _pycomponent.Aggregate_stats_in_event_static_get_name()
Aggregate_stats_in_event_static_get_name = _pycomponent.Aggregate_stats_in_event_static_get_name

class Desc_stats_in_event(Event):
    __swig_setmethods__ = {}
    for _s in [Event]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Desc_stats_in_event, name, value)
    __swig_getmethods__ = {}
    for _s in [Event]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Desc_stats_in_event, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["static_get_name"] = lambda x: _pycomponent.Desc_stats_in_event_static_get_name
    if _newclass:static_get_name = staticmethod(_pycomponent.Desc_stats_in_event_static_get_name)
    __swig_destroy__ = _pycomponent.delete_Desc_stats_in_event
    __del__ = lambda self : None;
Desc_stats_in_event_swigregister = _pycomponent.Desc_stats_in_event_swigregister
Desc_stats_in_event_swigregister(Desc_stats_in_event)

def Desc_stats_in_event_static_get_name():
  return _pycomponent.Desc_stats_in_event_static_get_name()
Desc_stats_in_event_static_get_name = _pycomponent.Desc_stats_in_event_static_get_name

class Flow_stats_in_event(Event):
    __swig_setmethods__ = {}
    for _s in [Event]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Flow_stats_in_event, name, value)
    __swig_getmethods__ = {}
    for _s in [Event]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Flow_stats_in_event, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["static_get_name"] = lambda x: _pycomponent.Flow_stats_in_event_static_get_name
    if _newclass:static_get_name = staticmethod(_pycomponent.Flow_stats_in_event_static_get_name)
    __swig_destroy__ = _pycomponent.delete_Flow_stats_in_event
    __del__ = lambda self : None;
Flow_stats_in_event_swigregister = _pycomponent.Flow_stats_in_event_swigregister
Flow_stats_in_event_swigregister(Flow_stats_in_event)

def Flow_stats_in_event_static_get_name():
  return _pycomponent.Flow_stats_in_event_static_get_name()
Flow_stats_in_event_static_get_name = _pycomponent.Flow_stats_in_event_static_get_name

class Queue_stats_in_event(Event):
    __swig_setmethods__ = {}
    for _s in [Event]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Queue_stats_in_event, name, value)
    __swig_getmethods__ = {}
    for _s in [Event]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Queue_stats_in_event, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["static_get_name"] = lambda x: _pycomponent.Queue_stats_in_event_static_get_name
    if _newclass:static_get_name = staticmethod(_pycomponent.Queue_stats_in_event_static_get_name)
    __swig_destroy__ = _pycomponent.delete_Queue_stats_in_event
    __del__ = lambda self : None;
Queue_stats_in_event_swigregister = _pycomponent.Queue_stats_in_event_swigregister
Queue_stats_in_event_swigregister(Queue_stats_in_event)

def Queue_stats_in_event_static_get_name():
  return _pycomponent.Queue_stats_in_event_static_get_name()
Queue_stats_in_event_static_get_name = _pycomponent.Queue_stats_in_event_static_get_name

class Barrier_reply_event(Event):
    __swig_setmethods__ = {}
    for _s in [Event]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Barrier_reply_event, name, value)
    __swig_getmethods__ = {}
    for _s in [Event]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Barrier_reply_event, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["static_get_name"] = lambda x: _pycomponent.Barrier_reply_event_static_get_name
    if _newclass:static_get_name = staticmethod(_pycomponent.Barrier_reply_event_static_get_name)
    __swig_destroy__ = _pycomponent.delete_Barrier_reply_event
    __del__ = lambda self : None;
Barrier_reply_event_swigregister = _pycomponent.Barrier_reply_event_swigregister
Barrier_reply_event_swigregister(Barrier_reply_event)

def Barrier_reply_event_static_get_name():
  return _pycomponent.Barrier_reply_event_static_get_name()
Barrier_reply_event_static_get_name = _pycomponent.Barrier_reply_event_static_get_name

class Error_event(Event):
    __swig_setmethods__ = {}
    for _s in [Event]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Error_event, name, value)
    __swig_getmethods__ = {}
    for _s in [Event]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Error_event, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["static_get_name"] = lambda x: _pycomponent.Error_event_static_get_name
    if _newclass:static_get_name = staticmethod(_pycomponent.Error_event_static_get_name)
    __swig_destroy__ = _pycomponent.delete_Error_event
    __del__ = lambda self : None;
Error_event_swigregister = _pycomponent.Error_event_swigregister
Error_event_swigregister(Error_event)

def Error_event_static_get_name():
  return _pycomponent.Error_event_static_get_name()
Error_event_static_get_name = _pycomponent.Error_event_static_get_name

import nox.lib.openflow
import nox.lib.netinet
UINT32_MAX = _pycomponent.UINT32_MAX
class PyContext(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PyContext, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PyContext, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def resolve(self, *args): return _pycomponent.PyContext_resolve(self, *args)
    def get_kernel(self): return _pycomponent.PyContext_get_kernel(self)
    def get_version(self): return _pycomponent.PyContext_get_version(self)
    def post(self, *args): return _pycomponent.PyContext_post(self, *args)
    def register_event(self, *args): return _pycomponent.PyContext_register_event(self, *args)
    def register_python_event(self, *args): return _pycomponent.PyContext_register_python_event(self, *args)
    def register_handler(self, *args): return _pycomponent.PyContext_register_handler(self, *args)
    def register_handler_on_match(self, *args): return _pycomponent.PyContext_register_handler_on_match(self, *args)
    def unregister_handler(self, *args): return _pycomponent.PyContext_unregister_handler(self, *args)
    def send_openflow_command(self, *args): return _pycomponent.PyContext_send_openflow_command(self, *args)
    def send_openflow_packet_port(self, *args): return _pycomponent.PyContext_send_openflow_packet_port(self, *args)
    def send_openflow_packet_acts(self, *args): return _pycomponent.PyContext_send_openflow_packet_acts(self, *args)
    def send_openflow_buffer_port(self, *args): return _pycomponent.PyContext_send_openflow_buffer_port(self, *args)
    def send_openflow_buffer_acts(self, *args): return _pycomponent.PyContext_send_openflow_buffer_acts(self, *args)
    def send_flow_command(self, *args): return _pycomponent.PyContext_send_flow_command(self, *args)
    def close_openflow_connection(self, *args): return _pycomponent.PyContext_close_openflow_connection(self, *args)
    def send_switch_command(self, *args): return _pycomponent.PyContext_send_switch_command(self, *args)
    def switch_reset(self, *args): return _pycomponent.PyContext_switch_reset(self, *args)
    def switch_update(self, *args): return _pycomponent.PyContext_switch_update(self, *args)
    def send_add_snat(self, *args): return _pycomponent.PyContext_send_add_snat(self, *args)
    def send_del_snat(self, *args): return _pycomponent.PyContext_send_del_snat(self, *args)
    def get_switch_controller_ip(self, *args): return _pycomponent.PyContext_get_switch_controller_ip(self, *args)
    def get_switch_ip(self, *args): return _pycomponent.PyContext_get_switch_ip(self, *args)
    def send_table_stats_request(self, *args): return _pycomponent.PyContext_send_table_stats_request(self, *args)
    def send_port_stats_request(self, *args): return _pycomponent.PyContext_send_port_stats_request(self, *args)
    def send_desc_stats_request(self, *args): return _pycomponent.PyContext_send_desc_stats_request(self, *args)
    def send_port_mod(self, *args): return _pycomponent.PyContext_send_port_mod(self, *args)
    def send_aggregate_stats_request(self, *args): return _pycomponent.PyContext_send_aggregate_stats_request(self, *args)
    __swig_destroy__ = _pycomponent.delete_PyContext
    __del__ = lambda self : None;
PyContext_swigregister = _pycomponent.PyContext_swigregister
PyContext_swigregister(PyContext)



