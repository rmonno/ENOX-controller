# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_oxidereactor', [dirname(__file__)])
        except ImportError:
            import _oxidereactor
            return _oxidereactor
        if fp is not None:
            try:
                _mod = imp.load_module('_oxidereactor', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _oxidereactor = swig_import_helper()
    del swig_import_helper
else:
    import _oxidereactor
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class delayedcall(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, delayedcall, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, delayedcall, name)
    __repr__ = _swig_repr
    def cancel(self): return _oxidereactor.delayedcall_cancel(self)
    def delay(self, *args): return _oxidereactor.delayedcall_delay(self, *args)
    def reset(self, *args): return _oxidereactor.delayedcall_reset(self, *args)
    def __init__(self): 
        this = _oxidereactor.new_delayedcall()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _oxidereactor.delete_delayedcall
    __del__ = lambda self : None;
delayedcall_swigregister = _oxidereactor.delayedcall_swigregister
delayedcall_swigregister(delayedcall)

class oxidereactor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, oxidereactor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, oxidereactor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _oxidereactor.new_oxidereactor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _oxidereactor.delete_oxidereactor
    __del__ = lambda self : None;
    def addReader(self, *args): return _oxidereactor.oxidereactor_addReader(self, *args)
    def addWriter(self, *args): return _oxidereactor.oxidereactor_addWriter(self, *args)
    def removeReader(self, *args): return _oxidereactor.oxidereactor_removeReader(self, *args)
    def removeWriter(self, *args): return _oxidereactor.oxidereactor_removeWriter(self, *args)
    def callLater(self, *args): return _oxidereactor.oxidereactor_callLater(self, *args)
    def resolve(self, *args): return _oxidereactor.oxidereactor_resolve(self, *args)
oxidereactor_swigregister = _oxidereactor.oxidereactor_swigregister
oxidereactor_swigregister(oxidereactor)

class vigillog(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vigillog, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vigillog, name)
    __repr__ = _swig_repr
    def fatal(self, *args): return _oxidereactor.vigillog_fatal(self, *args)
    def warn(self, *args): return _oxidereactor.vigillog_warn(self, *args)
    def err(self, *args): return _oxidereactor.vigillog_err(self, *args)
    def info(self, *args): return _oxidereactor.vigillog_info(self, *args)
    def dbg(self, *args): return _oxidereactor.vigillog_dbg(self, *args)
    def mod_init(self, *args): return _oxidereactor.vigillog_mod_init(self, *args)
    def is_emer_enabled(self, *args): return _oxidereactor.vigillog_is_emer_enabled(self, *args)
    def is_err_enabled(self, *args): return _oxidereactor.vigillog_is_err_enabled(self, *args)
    def is_warn_enabled(self, *args): return _oxidereactor.vigillog_is_warn_enabled(self, *args)
    def is_info_enabled(self, *args): return _oxidereactor.vigillog_is_info_enabled(self, *args)
    def is_dbg_enabled(self, *args): return _oxidereactor.vigillog_is_dbg_enabled(self, *args)
    def __init__(self): 
        this = _oxidereactor.new_vigillog()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _oxidereactor.delete_vigillog
    __del__ = lambda self : None;
vigillog_swigregister = _oxidereactor.vigillog_swigregister
vigillog_swigregister(vigillog)



